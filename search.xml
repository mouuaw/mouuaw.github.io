<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>4장 데이터 조작 1</title>
      <link href="/2019/03/20/R-ch4.disabled/"/>
      <url>/2019/03/20/R-ch4.disabled/</url>
      
        <content type="html"><![CDATA[<h2 id="01-아이리스-데이터"><a href="#01-아이리스-데이터" class="headerlink" title="01 아이리스 데이터"></a>01 아이리스 데이터</h2><p>아이리스 데이터는 R에 기본으로 내장되어 있고, 이해하기 쉬우며 크기가 작고 기계 학습에서 인기 있는 분야 중 하나인 분류에 적합한 데이터다. 이런 이유로 아이리스는 R뿐만 아니라 다른 데이터 분석이나 기계학습 관련 라이브러리에서 자주 사용되고 있다.</p><ul><li>아이리스 데이터</li></ul><p>Species(Factor): 붓꽃의 종. setosa, versicolor, virginica 세 가지 값 중 하나<br>Sepal.Width(Number): 꽃받침의 너비<br>Sepal.Length(Number): 꽃받침의 길이<br>Petal.Width(Number): 꽃잎의 너비<br>Petal.Length(Number): 꽃잎의 길이</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; head(iris)</span><br><span class="line"></span><br><span class="line">  Sepal.Length Sepal.Width Petal.Length Petal.Width Species</span><br><span class="line"><span class="number">1</span>         <span class="number">5.1</span>         <span class="number">3.5</span>         <span class="number">1.4</span>         <span class="number">0.2</span>   setosa</span><br><span class="line"><span class="number">2</span>         <span class="number">4.9</span>         <span class="number">3.0</span>         <span class="number">1.4</span>         <span class="number">0.2</span>   setosa</span><br><span class="line"><span class="number">3</span>         <span class="number">4.7</span>         <span class="number">3.2</span>         <span class="number">1.3</span>         <span class="number">0.2</span>   setosa</span><br><span class="line"><span class="number">4</span>         <span class="number">4.6</span>         <span class="number">3.1</span>         <span class="number">1.5</span>         <span class="number">0.2</span>   setosa</span><br><span class="line"><span class="number">5</span>         <span class="number">5.0</span>         <span class="number">3.6</span>         <span class="number">1.4</span>         <span class="number">0.2</span>   setosa</span><br><span class="line"><span class="number">6</span>         <span class="number">5.4</span>         <span class="number">3.9</span>         <span class="number">1.7</span>         <span class="number">0.4</span>   setosa</span><br><span class="line"></span><br><span class="line">&gt; str(iris)</span><br><span class="line"></span><br><span class="line"><span class="string">'data.frame'</span>:    <span class="number">150</span> obs. of <span class="number">5</span> variables:</span><br><span class="line"> $ Sepal.Length: num <span class="number">5.1</span> <span class="number">4.9</span> <span class="number">4.7</span> <span class="number">4.6</span> <span class="number">5</span> <span class="number">5.4</span> <span class="number">4.6</span> <span class="number">5</span> <span class="number">4.4</span> <span class="number">4.9</span> <span class="keyword">...</span></span><br><span class="line"> $ Sepal.Width : num <span class="number">3.5</span> <span class="number">3</span> <span class="number">3.2</span> <span class="number">3.1</span> <span class="number">3.6</span> <span class="number">3.9</span> <span class="number">3.4</span> <span class="number">3.4</span> <span class="number">2.9</span> <span class="number">3.1</span> <span class="keyword">...</span></span><br><span class="line"> $ Petal.Length: num <span class="number">1.4</span> <span class="number">1.4</span> <span class="number">1.3</span> <span class="number">1.5</span> <span class="number">1.4</span> <span class="number">1.7</span> <span class="number">1.4</span> <span class="number">1.5</span> <span class="number">1.4</span> <span class="number">1.5</span> <span class="keyword">...</span></span><br><span class="line"> $ Petal.Width : num <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.4</span> <span class="number">0.3</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.1</span> <span class="keyword">...</span></span><br><span class="line"> $ Species : Factor w/ <span class="number">3</span> levels <span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,..: <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> ..</span><br></pre></td></tr></table></figure><p>iris에는 붓꽃 데이터가 데이터 프레임으로 저장되어 있는 반면, iris3에는 3차월 배열 형태로 저장되어 있다.</p><p>이외에도 R에는 다양한 데이터 셋이 준비되어 있다. datasets 패키디에 있는 데이터 셋은 R에 기본적으로 포함된 데이터들이며, 이 데이터의 목록은 library(help=datasets) 명령으로 살펴볼 수 있다.</p><ul><li>AirPassenger: 1949년부터 1960년까지의 항공기 승객 수</li><li>airquality: 1973년 5월부터 9월까지의 뉴욕 대기 오염 정도에 대한 기록</li><li>cars: 자동차의 주행 속도에 따른 제동 거리</li><li>mtcars: 1974년 미국 모터 트렌드 매거진에 실린 32개 자동차에 대해 연료 효율을 비롯한 10여 가지 특징을 기록</li><li>Titanic: 타이타닉 호의 생존자 정보를 호실(1등실, 2등실, 3등실), 성별, 나이, 생존 여부로 정리</li><li>InsectSprays: 6종류의 살충제를 사용했을 때 각 살충제에 대해 살아남은 벌레의 수</li><li>Orange: 오렌지 나무의 종류, 연령, 둘레</li><li>swiss: 1888년경 프랑스어를 사용하는 스위스 내 47개 주의 출산율과 사회 경제적 지표(농업 종사자 비율, 군 입대 시험 성적, 교육 등)</li></ul><p>이들 데이터를 사용할 때는 ‘data(데이터 셋 이름)’ 명령을 사용한다. 예를들어, mtcars를 살펴보려면 다음과 같은 명령을 사용한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; data(mtcars)</span><br><span class="line">&gt; head(mtcars)</span><br></pre></td></tr></table></figure><p>mtcars 데이터 셋의 상세 내용르 알고 싶다면 ?mtcars 또는 help(mtcars) 명령을 사용한다.</p><h2 id="02-파일-입출력"><a href="#02-파일-입출력" class="headerlink" title="02 파일 입출력"></a>02 파일 입출력</h2><h3 id="CSV-파일-입출력"><a href="#CSV-파일-입출력" class="headerlink" title="CSV 파일 입출력"></a>CSV 파일 입출력</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">read.csv: CSV 파일을 데이터 프레임으로 읽어들인다.</span><br><span class="line">read.csv(</span><br><span class="line">  file, <span class="comment"># 파일명</span></span><br><span class="line">  header=<span class="literal">FALSE</span>, <span class="comment"># 파일의 첫 행을 헤더로 처리할 것인지 여부</span></span><br><span class="line">  <span class="comment"># 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.</span></span><br><span class="line">  <span class="comment"># 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.</span></span><br><span class="line">  na.strings=<span class="string">"NA"</span>,</span><br><span class="line">  <span class="comment"># 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른</span></span><br><span class="line">  <span class="comment"># 설정을 하지 않았다면 기본값은 보통 TRUE다.</span></span><br><span class="line">  stringsAsFactors=default.stringsAsFactors()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">반환 값은 데이터 프레임이다.</span><br><span class="line"></span><br><span class="line">write.csv: 데이터 프레임을 csv로 저장한다.</span><br><span class="line">write.csv(</span><br><span class="line">  x, <span class="comment"># 파일에 저장할 데이터 프레임 또는 행렬</span></span><br><span class="line">  file=<span class="string">""</span>, <span class="comment"># 데이터를 저장할 파일명</span></span><br><span class="line">  row.names=<span class="literal">TRUE</span> <span class="comment"># TRUE면 행 이름을 CSV 파일에 포함하여 저장한다.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; (x &lt;- read.csv(<span class="string">"a.csv"</span>)) <span class="comment"># a.csv 파일을 읽어온다.</span></span><br></pre></td></tr></table></figure><p>읽어들인 파일은 데이터 프레임형식으로 읽어온다.</p><p>다음과 같이 헤더가 없는 csv파일도 존재한다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="string">"Mr. Foo"</span>,<span class="number">95</span></span><br><span class="line"><span class="number">2</span>,<span class="string">"Ms. Bar"</span>,<span class="number">97</span></span><br><span class="line"><span class="number">3</span>,<span class="string">"Mr. Baz"</span>,<span class="number">92</span></span><br></pre></td></tr></table></figure></p><p>이렇게 헤더가 없는 경우 header=FALSE 를 지정해준다. 다음과 같이 names() 를 통해서 컬럼 이름을 지정해줘야 한다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (x &lt;- read.csv(<span class="string">"b.csv"</span>), header=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; names(x) &lt;- c(<span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"score"</span>)</span><br><span class="line">&gt; x</span><br></pre></td></tr></table></figure></p><p>문자열 데이터의 경우 별 다른 설정이 없으면 factor로 읽어들인다. as.character() 를 사용해서 문자열로 바꿔주거나 파일을 불러올때 부터 stringsAsFactors를 사용해주면 된다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- read.csv(<span class="string">"a.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure><h3 id="파일-데이터에-NA값이-있을-경우"><a href="#파일-데이터에-NA값이-있을-경우" class="headerlink" title="파일 데이터에 NA값이 있을 경우"></a>파일 데이터에 NA값이 있을 경우</h3><p>파일 데이터에 정상적인 값이 들어있지 않은경우가 있다. 이럴경우 na.strings() 를 사용하면 된다.<br>na.strings() 는 주어진 문자열을 R이 인식하는 NA로 바꿔준다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- read.csv(<span class="string">"c.csv"</span>, na.strings=c(<span class="string">"NIL"</span>))</span><br></pre></td></tr></table></figure></p><p>데이터를 CSV 파일로 저장하려면 write.csv()를 사용한다. 다음 예에서는 row.names를 FALSE로 지정하여 행 이름은 제외하고 파일에 저장한다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; write.csv(x, <span class="string">"d.csv"</span>, row.names=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure></p><h3 id="객체의-파일-입출력"><a href="#객체의-파일-입출력" class="headerlink" title="객체의 파일 입출력"></a>객체의 파일 입출력</h3><p>바이너리 파일로 R 객체를 저장하고 불러들이는 함수에는 save(), load()가 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">save: 메모리에 있는 객체를 파일에 저장한다.</span><br><span class="line">save(</span><br><span class="line">  <span class="keyword">...</span>, <span class="comment"># 저장할 객체의 이름</span></span><br><span class="line">  list=character(), <span class="comment"># 저장할 객체의 이름을 백터로 지정할 경우 ... 대신 사용</span></span><br><span class="line">  file <span class="comment"># 파일명</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">load: 파일로부터 객체를 메모리로 읽어들인다.</span><br><span class="line">load(</span><br><span class="line">  file <span class="comment"># 파일명</span></span><br><span class="line">)</span><br><span class="line">반환 값은 파일에서 읽어들인 객체의 이름들을 저장한 벡터다.</span><br></pre></td></tr></table></figure><h2 id="03-데이터-프레임의-행과-컬럼-합치기"><a href="#03-데이터-프레임의-행과-컬럼-합치기" class="headerlink" title="03 데이터 프레임의 행과 컬럼 합치기"></a>03 데이터 프레임의 행과 컬럼 합치기</h2><ul><li>rbind(…) 지정한 데이터들을 행으로 취급해 합친다.</li><li>cbind(…) 지정한 데이터들을 컬럼으로 취급해 합친다.</li></ul><p>예들 들어, c(1,2,3), c(4,5,6) 이라는 두 벡터는 rbind()를 사용해 각 벡터를 한 행으로 하는 행렬로 합칠 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; rbind(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span></span><br></pre></td></tr></table></figure><p>마찬가지로 데이터 프레임 역시 rbind()를 사용하여 행을 합칠 수 있다. </p><h2 id="04-apply-계열-함수"><a href="#04-apply-계열-함수" class="headerlink" title="04 apply 계열 함수"></a>04 apply 계열 함수</h2><p>R에는 벡터, 행렬 또는 데이터 프레임에 임의의 함수를 적용한 결과를 얻기 위한 apply 계열 함수가 있다. 이 함수들은 데이터 전체에 함수를 한 번에 적용하는 벡터 연산을 수행하므로 속도가 빠르다.</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply: 배열 또는 행렬에 함수 FUN을 MARGIN 방향으로 적용하여 결과를 벡터, 배열 또는 리스트로 반환한다.</span><br><span class="line">apply(</span><br><span class="line">  X, <span class="comment"># 배열 또는 행렬</span></span><br><span class="line">  MARGIN, <span class="comment"># 함수를 적용하는 방향. 1은 행 방향, 2는 열 방향</span></span><br><span class="line">          <span class="comment"># c(1, 2)는 행과 열 방향 모두를 의미</span></span><br><span class="line">  FUN     <span class="comment"># 적용할 함수</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">반환 값은 FUN이 길이 <span class="number">1</span>인 벡터들을 반환한 경우 벡터, <span class="number">1</span>보다 큰 벡터들을 반환한 경우 행렬, 서로 다른 길이의 벡터를 반환한 경우 리스트다.</span><br></pre></td></tr></table></figure><p>합을 구하는 함수 sum()을 apply()에 적용하는 예에 대해 알아보자. sum()은 인자로 주어진 값들의 합을 구하는 간단한 함수다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; d &lt;- matrix(<span class="number">1</span>:<span class="number">9</span>, ncol=<span class="number">3</span>)</span><br><span class="line">&gt; d</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">4</span>    <span class="number">7</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">5</span>    <span class="number">8</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">6</span>    <span class="number">9</span></span><br><span class="line">&gt; apply(d, <span class="number">1</span>, sum)</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">15</span> <span class="number">18</span></span><br><span class="line">&gt; apply(d, <span class="number">2</span>, sum)</span><br><span class="line">[<span class="number">1</span>] <span class="number">6</span> <span class="number">15</span> <span class="number">24</span></span><br></pre></td></tr></table></figure><p>행 또는 열의 합 그리고 평균의 계산은 빈번히 사용되므로 관련 함수들이 미리 정의되어 있다. </p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rowSums: 숫자 배열 또는 데이터 프레임에서 행의 합을 구한다.</span><br><span class="line">rowSums(</span><br><span class="line">  x, <span class="comment"># 배열 또는 숫자를 저장한 데이터 프레임</span></span><br><span class="line">  na.rm=<span class="literal">FALSE</span>, <span class="comment"># NA를 제외할지 여부</span></span><br><span class="line">)</span><br><span class="line">반환 값은 행 방향에 저장된 값의 합이다.</span><br><span class="line"></span><br><span class="line">rowMeans: 숫자 배열 또는 데이터 프레임에서 행의 평균을 구한다.</span><br><span class="line">rowMeans(</span><br><span class="line">  x, <span class="comment"># 배열 또는 숫자를 저장한 데이터 프레임</span></span><br><span class="line">  na.rm=<span class="literal">FALSE</span>, <span class="comment"># NA를 제외할지 여부</span></span><br><span class="line">)</span><br><span class="line">반환 값은 행 방향에 저장된 값의 평균이다.</span><br></pre></td></tr></table></figure><p>colSums(), colMeans() 역시 같은 형식으로 사용하면 된다.</p><h3 id="lapply"><a href="#lapply" class="headerlink" title="lapply()"></a>lapply()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lapply: 벡터, 리스트, 표현식, 데이터 프레임 등에 함수를 적용하고 그 결과를 리스트로 반환한다.</span><br><span class="line">lapply(</span><br><span class="line">  X, <span class="comment"># 벡터, 리스트, 표현식 또는 데이터 프레임</span></span><br><span class="line">  FUN, <span class="comment"># 적용할 함수</span></span><br><span class="line">  <span class="keyword">...</span> <span class="comment"># 추가 인자. 이 인자들은 FUN에 전달된다.</span></span><br><span class="line">)</span><br><span class="line">반환 값은 X와 같은 길이의 리스트다.</span><br></pre></td></tr></table></figure><p>리스트 보다는 벡터 또는 데이터 프레임이 사용하기에 직관적인 면이 있으므로 lapply()의 결과를 벡터 또는 데이터 프레임으로 변환할 필요가 있다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">unlist: 리스트 구조를 벡터로 변환한다.</span><br><span class="line">unlist(</span><br><span class="line">  x, <span class="comment"># R 객체. 보통 리스트 또는 벡터</span></span><br><span class="line">  recursive=<span class="literal">FALSE</span>, <span class="comment"># x에 포함된 리스트 역시 재귀적으로 변환할지 여부</span></span><br><span class="line">  use.names=<span class="literal">TRUE</span> <span class="comment"># 리스트 내 값의 이름을 보존할지 여부</span></span><br><span class="line">)</span><br><span class="line">반환 값은 벡터다.</span><br><span class="line"></span><br><span class="line">do.call: 함수를 리스트로 주어진 인자에 적용하여 결과를 반환한다.</span><br><span class="line">do.call(</span><br><span class="line">  what, <span class="comment"># 호출할 함수</span></span><br><span class="line">  args, <span class="comment"># 함수에 전달할 인자의 리스트</span></span><br><span class="line">)</span><br><span class="line">반환 값은 함수 호출 결과다.</span><br></pre></td></tr></table></figure></p><p>lapply()는 인자로 리스트를 받을 수 있다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; (x &lt;- list(a=<span class="number">1</span>:<span class="number">3</span>, b=<span class="number">4</span>:<span class="number">6</span>))</span><br><span class="line">$a</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">$b</span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">&gt; lapply(x, mean)</span><br><span class="line">$a</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br><span class="line"></span><br><span class="line">$b</span><br><span class="line">[<span class="number">1</span>] <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>데이터 프레임에도 곧바로 lapply()를 적용할 수 있다.</p><h3 id="sapply"><a href="#sapply" class="headerlink" title="sapply()"></a>sapply()</h3><p>sapply() 는 lapply()와 유사하지만 리스트 대신 행렬, 벡터 등의 데이터 타입으로 결과를 반환하는 특징이 있는 함수다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sapply: 벡터, 리스트, 표현식, 데이터 프레임 등에 함수를 적용하고 그 결과를 벡터 또는 행렬로 반환한다.</span><br><span class="line">sapply(</span><br><span class="line">  X, <span class="comment"># 벡터, 리스트, 표현식 또는 데이터 프레임</span></span><br><span class="line">  FUN, <span class="comment"># 적용할 함수</span></span><br><span class="line">  <span class="keyword">...</span>, <span class="comment"># 추가 인자. 이 인자들은 FUN에 전달된다.</span></span><br><span class="line">)</span><br><span class="line">반환 값은 FUN의 결과가 길이 <span class="number">1</span>인 벡터들이면 벡터, 길이가 <span class="number">1</span>보다 큰 벡터들이면 행렬이다.</span><br></pre></td></tr></table></figure><p>lapply()는 결과를 리스트로 반환하지만, sapply()는 벡터를 반환한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; lapply(iris[, <span class="number">1</span>:<span class="number">4</span>], mean)</span><br><span class="line">$Sepal.Length</span><br><span class="line">[<span class="number">1</span>] <span class="number">5.843333</span></span><br><span class="line"></span><br><span class="line">$Sepal.Width</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.057333</span></span><br><span class="line"></span><br><span class="line">$Petal.Length</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.758</span></span><br><span class="line"></span><br><span class="line">$Petal.Width</span><br><span class="line">[<span class="number">1</span>] <span class="number">1.199333</span></span><br><span class="line">&gt; sapply(iris[, <span class="number">1</span>:<span class="number">4</span>], mean)</span><br><span class="line">Sepal.Length  Sepal.Width  Petal.Length  Petal.Width</span><br><span class="line">    <span class="number">5.843333</span>     <span class="number">3.057333</span>      <span class="number">3.758000</span>     <span class="number">1.199333</span></span><br><span class="line">&gt; class(sapply(iris[, <span class="number">1</span>:<span class="number">4</span>], mean))  <span class="comment"># "numeric"은 숫자를 저장한 벡터를 의미함</span></span><br><span class="line">[<span class="number">1</span>] <span class="string">"numeric"</span></span><br></pre></td></tr></table></figure><p>sapply()에서 반환한 벡터는 as.data.frame()을 사용해 데이터 프레임으로 변환할 수 있다.</p><p>sapply()의 func에 반환값이 1개 값인 경우, sapply()의 결과는 이들 값을 모은 벡터가 된다. 하지만 sapply()에 func의 반환값이 1개 이상인 경우 행렬을 반환한다. </p><p>sapply()는 한 가지 타입만 저장 가능한 벡터나 행렬을 반환 하므로 func의 반환값은 데이터 타입이 섞여있으면 안된다.</p><h3 id="tapply"><a href="#tapply" class="headerlink" title="tapply()"></a>tapply()</h3><p>tapply()는 그룹별로 함수를 적용하기 위한 apply 계열 함수다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tapply: 벡터 등에 저장된 데이터를 주어진 기준에 따라 그룹으로 묶은 뒤 각 그룹에 함수를 적용하고 그 결과를 반환한다.</span><br><span class="line">tapply(</span><br><span class="line">  X, <span class="comment"># 벡터</span></span><br><span class="line">  INDEX, <span class="comment"># 데이터를 그룹으로 묶을 색인, 팩터를 지정해야 하며 팩터가 아닌 타입이 지정되면 팩터로 형 변환된다.</span></span><br><span class="line">  func, <span class="comment"># 각 그룹마다 적용할 함수</span></span><br><span class="line">  <span class="keyword">...</span>, <span class="comment"># 추가 인자. 이 인자들은 func에 전달된다.</span></span><br><span class="line">)</span><br><span class="line">반환값은 배열이다.</span><br></pre></td></tr></table></figure><p>다음과 같은 예를 생각해보자. 1부터 10까지의 숫자가 있고 이들이 모두 한 그룹에 속해 있을때, 이 그룹에 속한 데이터의 합을 구하면 55가 될 것이다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; tapply(<span class="number">1</span>:<span class="number">10</span>, rep(<span class="number">1</span>, <span class="number">10</span>), sum)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure></p><p>이번에는 1부터 10까지 숫자를 홀수별, 짝수별로 묶어서 합을 구해보자. INDEX에 홀수와 짝수별로 다른 팩터 값이 주어지도록 %% 2 를 사용했다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; tapply(<span class="number">1</span>:<span class="number">10</span>, <span class="number">1</span>:<span class="number">10</span> %% <span class="number">2</span> == <span class="number">1</span>, sum)</span><br><span class="line"><span class="literal">FALSE</span> <span class="literal">TRUE</span></span><br><span class="line"><span class="number">30</span>    <span class="number">25</span></span><br></pre></td></tr></table></figure><h3 id="mapply"><a href="#mapply" class="headerlink" title="mapply()"></a>mapply()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mapply: 함수에 리스트 또는 벡터로 주어진 인자를 적용한 결과를 반환한다.</span><br><span class="line">mapply(</span><br><span class="line">  func, <span class="comment"># 실행할 함수</span></span><br><span class="line">  <span class="keyword">...</span>, <span class="comment"># 적용할 인자</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">...</span> 에 주어진 여러 데이터가 있을 때 func에 이들 데이터 각각의 요소들을 인자로 전달해 실행한 결과를 반환한다.</span><br></pre></td></tr></table></figure><p>난수를 생성하는 함수를 사용하여 예제를 만들어보자</p><ul><li>난수 생성 함수</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rnorm(n, mean=<span class="number">0</span>, sd=<span class="number">1</span>) 평균이 n, 표준 편차가 sd인 정규 분포를 따르는 난수 n개 발생</span><br><span class="line">runinf(n, min=<span class="number">0</span>, max=<span class="number">1</span>) 최솟값이 min, 최댓값이 max인 균등 분포를 따르는 난수 n개 발생</span><br><span class="line">rpois(n, lambda) 람다 값이 lambda인 포아송 분포를 따르는 난수 n개 발생</span><br><span class="line">rexp(n, rate=<span class="number">1</span>) 람다가 rate인 지수 분포를 따르는 난수 n개 발생</span><br></pre></td></tr></table></figure><p>다음은 평균 0, 표준 편차 1을 따르는 난수 10개를 발생시킨다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rnorm(<span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>rnorm()을 다음 세 가지 조합에 대해 호출할 필요가 있다고 해보자.</p><p>n: 1, 2, 3<br>mean: 0, 10, 100<br>sd: 1, 1, 1</p><p>이를 수행하기 위해 rnorm()을 세 번 호출해도 되지만 또 다른 방법은 mapply()를 활용하는 것이다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; mapply(rnorm,</span><br><span class="line">  c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="comment"># n</span></span><br><span class="line">  c(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>), <span class="comment"># mean</span></span><br><span class="line">  c(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment"># sd</span></span><br><span class="line">)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="number">1</span>] -<span class="number">0.1700506</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">8.321710</span> <span class="number">7.564312</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">99.45474</span> <span class="number">100.10412</span> <span class="number">100.80828</span></span><br></pre></td></tr></table></figure><h2 id="05-데이터를-그룹으로-묶은-후-함수-호출하기"><a href="#05-데이터를-그룹으로-묶은-후-함수-호출하기" class="headerlink" title="05 데이터를 그룹으로 묶은 후 함수 호출하기"></a>05 데이터를 그룹으로 묶은 후 함수 호출하기</h2><p>데이터 분석에는 데이터 전체에 대해 함수를 호출하기보다는 그룹별로 나눈 뒤 각 그룹별로 연산하는 일이 흔하다. 이런 목적에 특화된 패키지들이 있는데, doBy는 그중 잘 알려진 패키지다.</p><p>doBy 패키지에는 summaryBy(), orderBy(), sampleBy()와 같이 특정 값에 따라 데이터를 처리하는 유용한 함수들이 있다.</p><ul><li>summaryBy() 데이터 프레임을 컬럼 값에 따라 그룹으로 묶은 후 요약 값 계산</li><li>orderBy() 지정된 컬럼 값에 따라 데이터 프레임을 정렬</li><li>sampleBy() 데이터 프레임을 특정 컬럼 값에 따라 그룹으로 묶은 후 각 그룹에서 샘플(sample) 추출</li></ul><h3 id="summaryBy"><a href="#summaryBy" class="headerlink" title="summaryBy()"></a>summaryBy()</h3><p>summaryBy() 는 그룹별로 그룹을 특징짓는 통계적 요약 값을 계산하는 함수다. 기본적으로 제공되는 summary() 함수와 비교해보자</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">summary: 다양한 모델링 함수의 결과에 대한 요약 결과를 반환한다.</span><br><span class="line">summary(</span><br><span class="line">  object <span class="comment"># 요약할 객체</span></span><br><span class="line">)</span><br><span class="line">반환 값은 요약 결과며, 데이터 타입은 object 타입에 따라 다르다</span><br><span class="line"></span><br><span class="line">summaryBy: 포뮬러에 따라 데이터를 그룹으로 묶고 요약한 결과를 반환한다.</span><br><span class="line">summaryBy(</span><br><span class="line">  formula, <span class="comment"># 요약을 수행할 포뮬러</span></span><br><span class="line">  data=parent.frame() <span class="comment"># 포뮬러를 적용할 데이터</span></span><br><span class="line">)</span><br><span class="line">반환 값은 데이터 프레임이다.</span><br></pre></td></tr></table></figure><p>summary() 는 결과값으로 최솟값, 1사분위수, 중앙값, 평균, 3사분위수, 최댓값을 보여준다. 팩터인 species는 각 레벨마다 몇 개의 값이 있는지를 보여준다.</p><p>doBy 패키지의 summaryBy()는 원하는 컬럼의 값을 특정 조건에 따라 요약하는 목적으로 사용한다. 예를 들어, Sepal.Length 와 Sepal.Width를 Species에 따라 살펴보려면 다음과 같이 하면 된다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; summaryBy(Sepal.Width + Sepal.Length ~ Species, iris)</span><br><span class="line">     Species Sepal.Width.mean Sepal.Length.mean</span><br><span class="line"><span class="number">1</span>     setosa            <span class="number">3.428</span>             <span class="number">5.006</span></span><br><span class="line"><span class="number">2</span> versicolor            <span class="number">2.770</span>             <span class="number">5.936</span></span><br><span class="line"><span class="number">3</span>  virginica            <span class="number">2.974</span>             <span class="number">6.588</span></span><br></pre></td></tr></table></figure><p>위 코드에서 ‘Sepal.Length + Sepal.Length ~ Species’ 부분은 포뮬러(수식) 이라고 하는데, 처리할 데이터를 일종의 수학 공식처럼 표현하는 방법이다. 이 예에서는 Sepal.Width와 Sepal.Length를 + 로 연결해 이 두가지에 대한 값을 결과에 각 컬럼으로 놓고, 각 행에는 ~ Species를 사용해 Species를 놓았다. 즉, 위 결과는 Sepal.Width와 Sepal.Length를 Species별로 요약한 것이다.</p><h3 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy()"></a>orderBy()</h3><p>orderBy()는 데이터 프레임을 정렬하는 목적으로 사용한다. orderBy()역시 base 패키지의 order()함수에 대응한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">order: 데이터를 정렬하기 위한 순서를 반환한다.</span><br><span class="line">order(</span><br><span class="line">  <span class="keyword">...</span>, <span class="comment"># 정렬할 데이터</span></span><br><span class="line">  <span class="comment"># na.last는 NA값을 정렬한 결과의 어디에 둘 것인지를 제어한다. 기본값인 na.last=TRUE는</span></span><br><span class="line">  <span class="comment"># NA 값을 정렬한 결과의 마지막에 둔다. na.last=FALSE는 정렬한 값의 처음에 둔다.</span></span><br><span class="line">  <span class="comment"># na.last=NA는 NA 값을 정렬 결과에서 제외한다.</span></span><br><span class="line">  na.last=<span class="literal">TRUE</span>,</span><br><span class="line">  decreasing=<span class="literal">FALSE</span> <span class="comment"># 내림차순 여부</span></span><br><span class="line">)</span><br><span class="line">반환 값은 원 데이터에 지정하면 정렬된 결과가 나오도록 하는 색인이다.</span><br><span class="line"></span><br><span class="line">orderBy: 포뮬러에 따라 데이터를 정렬한다.</span><br><span class="line">orderBy(</span><br><span class="line">  formula, <span class="comment"># 정렬할 기준을 지정한 포뮬러</span></span><br><span class="line">          <span class="comment"># ~의 좌측은 무시하며, ~ 우측에 나열한 이름에 따라 데이터가 정렬된다.</span></span><br><span class="line">  data, <span class="comment"># 정렬할 데이터</span></span><br><span class="line">)</span><br><span class="line">반환값은 order()와 동일하다.</span><br></pre></td></tr></table></figure><p>다음 예는 아이리스 데이터를 Sepal.Length에 따라 정렬했을 때 61행이 가장 처음에 해당함을 보여준다</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; order(iris$Sepal.Width)</span><br><span class="line">[<span class="number">1</span>] <span class="number">61</span> <span class="number">63</span> <span class="number">69</span> <span class="number">120</span> <span class="number">42</span> <span class="keyword">...</span></span><br><span class="line"><span class="keyword">...</span></span><br></pre></td></tr></table></figure><p>orderBy()는 order()와 유사하지만 정렬할 데이터를 포뮬러로 지정할 수 있다는 점이 편리하다. 다음 예는 모든 데이터를 Sepal.Width로 배열한다. orderBy()에서 ~의 좌측은 무시하므로 적지 않는다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; orderBy(~ Sepal.Width, iris)</span><br><span class="line">  Sepal.Length Sepal.Width Petal.Length Petal.Width    Species</span><br><span class="line"><span class="number">61</span>          <span class="number">5.0</span>         <span class="number">2.0</span>          <span class="number">3.5</span>         <span class="number">1.0</span> versicolor</span><br><span class="line"><span class="number">63</span>          <span class="number">6.0</span>         <span class="number">2.2</span>          <span class="number">4.0</span>         <span class="number">1.0</span> versicolor</span><br><span class="line"><span class="number">69</span>          <span class="number">6.2</span>         <span class="number">2.2</span>          <span class="number">4.5</span>         <span class="number">1.5</span> versicolor</span><br><span class="line"><span class="number">120</span>         <span class="number">6.0</span>         <span class="number">2.2</span>          <span class="number">5.0</span>         <span class="number">1.5</span> virginica</span><br><span class="line"><span class="number">42</span>          <span class="number">4.5</span>         <span class="number">2.3</span>          <span class="number">1.3</span>         <span class="number">0.3</span>    setosa</span><br><span class="line"><span class="keyword">...</span></span><br></pre></td></tr></table></figure><h3 id="sampleBy"><a href="#sampleBy" class="headerlink" title="sampleBy()"></a>sampleBy()</h3><p>sampleBy()는 데이터를 그룹으로 묶은 후 각 그룹에서 샘플을 추출하는 함수다. 이 함수는 sample()에 대응하므로 함께 알아보도록 하자</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sample: 샘플링을 수행한다.</span><br><span class="line">sample(</span><br><span class="line">  x, <span class="comment"># 샘플을 뽑을 데이터 벡터. 만약 길이 1인 숫자 n이 지정되면 1:n에서 샘플이 선택된다.</span></span><br><span class="line">  size, <span class="comment"># 샘플의 크기</span></span><br><span class="line">  replace=<span class="literal">FALSE</span>, <span class="comment"># 복원 추출 여부</span></span><br><span class="line">  prob <span class="comment"># 데이터가 뽑힐 가중치. 예를 들어, x=c(1,2,3) 에서 2개의 샘플을 뽑되 각 샘플이 뽑힐 확률을 50%, 20%, 30%로 하고자 한다면 size=2, prob=c(5,2,3) 을 지정한다.</span></span><br><span class="line">)</span><br><span class="line">반환 값은 샘플을 저장한 길이 size인 벡터다</span><br><span class="line"></span><br><span class="line">sampleBy: 포뮬러에 따라 데이ㅓ를 그룹으로 묶은 후 샘플을 추출한다.</span><br><span class="line">sampleBy(</span><br><span class="line">  formula, <span class="comment"># ~ 우측에 나열한 이름에 따라 데이터가 그룹으로 묶인다.</span></span><br><span class="line">  frac=<span class="number">0.1</span>, <span class="comment"># 추출할 샘플의 비율이며 기본값은 10%</span></span><br><span class="line">  replace=<span class="literal">FALSE</span>, <span class="comment"># 복원 추출 여부</span></span><br><span class="line">  data=parent.frame(), <span class="comment"># 데이터를 추출할 데이터 프레임</span></span><br><span class="line">  systematic=<span class="literal">FALSE</span> <span class="comment"># 계통 추출을 사용할지 여부</span></span><br><span class="line">)</span><br><span class="line">반환 값은 데이터 프레임이다.</span><br></pre></td></tr></table></figure><p>샘플링은 주어진 데이터를 훈련 데이터와 테스트 데이터로 분리하는데 유용하게 사용할 수 있다. 훈련 데이터로부터 모델을 만든 뒤 테스트 데이터에 모델을 적용하면 모델의 정확성을 평가할 수 있다.</p><p>평가를 올바르게 하려면 훈련 데이터와 테스트 데이터에 Species값 별로 데이터의 수가 균일한 것이 좋다. 바로 이런 경우에 sampleBy()가 유용하다.</p><p>다음은 아이리스 데이터에서 각 Species별로 10%의 데이터를 추출한 예다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; sampleBy(~ Species, frac=<span class="number">0.1</span>, data=iris)</span><br><span class="line">               Sepal.Length Sepal.Width Petal.Length Petal.Width    Species</span><br><span class="line">setosa.11               <span class="number">5.4</span>         <span class="number">3.7</span>          <span class="number">1.5</span>         <span class="number">0.2</span>     setosa</span><br><span class="line">setosa.29               <span class="number">5.2</span>         <span class="number">3.4</span>          <span class="number">1.4</span>         <span class="number">0.2</span>     setosa</span><br><span class="line">setosa.39               <span class="number">4.4</span>         <span class="number">3.0</span>          <span class="number">1.3</span>         <span class="number">0.2</span>     setosa</span><br><span class="line">setosa.41               <span class="number">5.0</span>         <span class="number">3.5</span>          <span class="number">1.3</span>         <span class="number">0.3</span>     setosa</span><br><span class="line">setosa.46               <span class="number">4.8</span>         <span class="number">3.0</span>          <span class="number">1.4</span>         <span class="number">0.3</span>     setosa</span><br><span class="line">versicolor.55           <span class="number">6.5</span>         <span class="number">2.8</span>          <span class="number">4.6</span>         <span class="number">1.5</span> versicolor</span><br><span class="line">versicolor.74           <span class="number">6.1</span>         <span class="number">2.8</span>          <span class="number">4.7</span>         <span class="number">1.2</span> versicolor</span><br><span class="line">versicolor.82           <span class="number">5.5</span>         <span class="number">2.4</span>          <span class="number">3.7</span>         <span class="number">1.0</span> versicolor</span><br><span class="line">versicolor.90           <span class="number">5.5</span>         <span class="number">2.5</span>          <span class="number">4.0</span>         <span class="number">1.3</span> versicolor</span><br><span class="line">versicolor.100          <span class="number">5.7</span>         <span class="number">2.8</span>          <span class="number">4.1</span>         <span class="number">1.3</span> versicolor</span><br><span class="line">virginica.112           <span class="number">6.4</span>         <span class="number">2.7</span>          <span class="number">5.3</span>         <span class="number">1.9</span>  virginica</span><br><span class="line">virginica.122           <span class="number">5.6</span>         <span class="number">2.8</span>          <span class="number">4.9</span>         <span class="number">2.0</span>  virginica</span><br><span class="line">virginica.123           <span class="number">7.7</span>         <span class="number">2.8</span>          <span class="number">6.7</span>         <span class="number">2.0</span>  virginica</span><br><span class="line">virginica.135           <span class="number">6.1</span>         <span class="number">2.6</span>          <span class="number">5.6</span>         <span class="number">1.4</span>  virginica</span><br><span class="line">virginica.140           <span class="number">6.9</span>         <span class="number">3.1</span>          <span class="number">5.4</span>         <span class="number">2.1</span>  virginica</span><br></pre></td></tr></table></figure><h2 id="06-데이터-분리-및-병합"><a href="#06-데이터-분리-및-병합" class="headerlink" title="06 데이터 분리 및 병합"></a>06 데이터 분리 및 병합</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">split: 주어진 기준에 따라 데이터를 분리한다.</span><br><span class="line">split(</span><br><span class="line">  x, <span class="comment"># 분리할 벡터 또는 데이터 프레임</span></span><br><span class="line">  f <span class="comment"># 분리할 기준을 저장한 팩터</span></span><br><span class="line">)</span><br><span class="line">반환 값은 분리된 데이터를 저장한 리스트다.</span><br><span class="line"></span><br><span class="line">subset: 조건을 만족하는 벡터, 행렬, 데이터 프레임의 일부를 반환한다.</span><br><span class="line">subset(</span><br><span class="line">  x, <span class="comment"># 일부를 취할 객체</span></span><br><span class="line">  subset, <span class="comment"># 데이터를 취할 것인지 여부</span></span><br><span class="line">  select <span class="comment"># 데이터 프레임의 경우 선택하고자 하는 컬럼</span></span><br><span class="line">)</span><br><span class="line">반환 값은 조건을 만족하는 데이터다.</span><br><span class="line"></span><br><span class="line">merge(</span><br><span class="line">  x, <span class="comment"># 병합할 데이터 프레임</span></span><br><span class="line">  y, <span class="comment"># 병합할 데이터 프레임</span></span><br><span class="line">)</span><br><span class="line">반환 값은 병합된 결과다.</span><br></pre></td></tr></table></figure><h2 id="07-데이터-정렬"><a href="#07-데이터-정렬" class="headerlink" title="07 데이터 정렬"></a>07 데이터 정렬</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sort: 벡터를 정렬한다.</span><br><span class="line">sort(</span><br><span class="line">  x, <span class="comment"># 정렬할 벡터</span></span><br><span class="line">  decreasing=<span class="literal">FALSE</span>, <span class="comment"># 내름차순 여부</span></span><br><span class="line">  na.last=<span class="literal">NA</span></span><br><span class="line">  <span class="comment"># na.last는 NA값을 정렬한 결과의 어디에 둘 것인지를 제어한다.</span></span><br><span class="line">  <span class="comment"># na.last=TRUE는 NA값을 정렬한 결과의 마지막에 두고,</span></span><br><span class="line">  <span class="comment"># na.last=FALSE는 정렬한 값의 처음에 둔다</span></span><br><span class="line">  <span class="comment"># 기본값은 na.last=NA는 NA값을 정렬 결과에서 제외한다.</span></span><br><span class="line">)</span><br><span class="line">반환 값은 정렬된 벡터다</span><br></pre></td></tr></table></figure><p>sort()는 값을 정렬한 결과를 반환할 뿐, 인자로 받은 벡터 자체를 변경하지 않는다.</p><h3 id="order"><a href="#order" class="headerlink" title="order()"></a>order()</h3><p>order()는 주어진 인자를 정렬하기 위한 각 요소의 index를 반환한다.</p><h2 id="08-데이터-프레임-컬럼-접근"><a href="#08-데이터-프레임-컬럼-접근" class="headerlink" title="08 데이터 프레임 컬럼 접근"></a>08 데이터 프레임 컬럼 접근</h2><h3 id="with"><a href="#with" class="headerlink" title="with()"></a>with()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">with: 데이터 환경에서 주어진 표현식을 평가한다</span><br><span class="line">with(</span><br><span class="line">  data, <span class="comment"># 환경(environment)을 만들 데이터</span></span><br><span class="line">  expr, <span class="comment"># 평가할 표현식</span></span><br><span class="line">  <span class="keyword">...</span> , <span class="comment"># 이후 함수들에 전달될 인자</span></span><br><span class="line">)</span><br><span class="line">반환 값은 expr의 평가값이다.</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; print(mean(iris$Sepal.Length))</span><br><span class="line">[<span class="number">1</span>] <span class="number">5.843333</span></span><br><span class="line">&gt; print(mean(iris$Sepal.Width))</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.057333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with 명령을 사용하면 값에 바로 접근할 수 있다.</span></span><br><span class="line"></span><br><span class="line">&gt; with(iris, &#123;</span><br><span class="line">  print(mean(Sepal.Length))</span><br><span class="line">  print(mean(Sepal.Width))</span><br><span class="line">&#125;)</span><br><span class="line">[<span class="number">1</span>] <span class="number">5.843333</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">3.057333</span></span><br></pre></td></tr></table></figure><h3 id="within"><a href="#within" class="headerlink" title="within()"></a>within()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">within: 데이터 환경에서 주어진 표현식을 평가한다.</span><br><span class="line">within(</span><br><span class="line">  data, <span class="comment"># 환경을 만들 데이터</span></span><br><span class="line">  expr, <span class="comment"># 평가할 표현식 expr의 예어는 코드 블록 &#123;...&#125; 을 들 수 있다.</span></span><br><span class="line">  <span class="keyword">...</span> <span class="comment"># 이후 함수들에 전달될 인자</span></span><br><span class="line">)</span><br><span class="line">반환 값은 expr의 평가에 따라 수정된 데이터다</span><br></pre></td></tr></table></figure><p>다음은 벡터에서 결측치를 중앙값으로 치환하는 예다</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- within(x , &#123;</span><br><span class="line">  val &lt;- iselse(is.na(val), median(val, na.rm=<span class="literal">TRUE</span>, val))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>위 코드에서 median() 함수 호출 시에 na.rm=TRUE를 지정했다. 이는 NA값이 포함된 채로 median()을 호출하면 결과로 NA가 나오기 때문이다.</p><h3 id="attach-detach"><a href="#attach-detach" class="headerlink" title="attach(), detach()"></a>attach(), detach()</h3><p>attach(), detach()는 함수 호출 후 모든 코드에서 컬럼들을 직접 접근할 수 있게한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attach</span>: 데이터를 R 검색 경로에 추가하여 변수명으로 바로 접근할 수 있게 한다.</span><br><span class="line"><span class="keyword">attach</span>(</span><br><span class="line">  what <span class="comment"># 이름으로 곧바로 접근하게 할 데이터 프레임 또는 리스트</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">detach</span>: 데이터를 R 검색 경로에서 제거한다.</span><br><span class="line"><span class="keyword">detach</span>(</span><br><span class="line">  what <span class="comment"># 제거할 객체</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">search: R 객체에 대한 검색 경로를 반환한다.</span><br><span class="line">search()</span><br><span class="line">반환 값은 R 객체를 검색하는 검색 경로다.</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; Sepal.Width</span><br><span class="line">Error: object <span class="string">'Sepal.Width'</span> not found</span><br><span class="line">&gt; <span class="keyword">attach</span>(iris)</span><br><span class="line">&gt; head(Sepal.Width)</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.5</span> <span class="number">3.0</span> <span class="number">3.2</span> <span class="number">3.1</span> <span class="number">3.6</span> <span class="number">3.9</span></span><br><span class="line">&gt; <span class="keyword">detach</span>(iris)</span><br><span class="line">&gt; Sepal.Width</span><br><span class="line">Error: object <span class="string">'Sepal.Width'</span> not found</span><br></pre></td></tr></table></figure><h2 id="09-조건에-맞는-데이터의-색인-찾기"><a href="#09-조건에-맞는-데이터의-색인-찾기" class="headerlink" title="09 조건에 맞는 데이터의 색인 찾기"></a>09 조건에 맞는 데이터의 색인 찾기</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">which: 조건이 참인 색인을 반환한다.</span><br><span class="line">which(</span><br><span class="line">  x <span class="comment"># 논릿값 벡터 또는 배열</span></span><br><span class="line">)</span><br><span class="line">반환 값은 논릿값이 참인 색인이다.</span><br><span class="line"></span><br><span class="line">which.max: 최댓값의 위치를 반환한다.</span><br><span class="line">which.max(</span><br><span class="line">  x <span class="comment"># 숫자 벡터</span></span><br><span class="line">)</span><br><span class="line">반환 값은 최댓값이 저장된 색인이다.</span><br><span class="line"></span><br><span class="line">which.min: 최솟값의 위치를 반환한다.</span><br><span class="line">which.min(</span><br><span class="line">  x <span class="comment"># 숫자 벡터</span></span><br><span class="line">)</span><br><span class="line">반환 값은 최솟값이 저장된 색인이다.</span><br></pre></td></tr></table></figure><p>예를 들어, iris 데이터에서 Species가 setosa인 행은 subset()으로 다음과 같이 찾을 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; subset(iris, Species == <span class="string">"setosa"</span>)</span><br><span class="line">   Sepal.Length Sepal.Width Petal.Length Petal.Width Species</span><br><span class="line"><span class="number">1</span>           <span class="number">5.1</span>         <span class="number">3.5</span>          <span class="number">1.4</span>         <span class="number">0.2</span>  setosa</span><br><span class="line"><span class="number">2</span>           <span class="number">4.9</span>         <span class="number">3.0</span>          <span class="number">1.4</span>         <span class="number">0.2</span>  setosa</span><br><span class="line"><span class="number">3</span>           <span class="number">4.7</span>         <span class="number">3.2</span>          <span class="number">1.3</span>         <span class="number">0.2</span>  setosa</span><br><span class="line"><span class="number">4</span>           <span class="number">4.6</span>         <span class="number">3.1</span>          <span class="number">1.5</span>         <span class="number">0.2</span>  setosa</span><br><span class="line"><span class="number">5</span>           <span class="number">5.0</span>         <span class="number">3.6</span>          <span class="number">1.4</span>         <span class="number">0.2</span>  setosa</span><br><span class="line"><span class="keyword">...</span></span><br></pre></td></tr></table></figure><p>which()의 경우 조건을 만족하는 행의 index를 반환한다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; which(iris$Species == <span class="string">"setosa"</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br><span class="line">[<span class="number">31</span>] <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span> <span class="number">48</span> <span class="number">49</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>min, max를 사용하면 index중에서 최솟값 최댓값을 찾을 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; which.min(iris$Sepal.Length)</span><br><span class="line">[<span class="number">1</span>] <span class="number">14</span></span><br><span class="line">&gt; which.max(iris$Sepal.Length)</span><br><span class="line">[<span class="number">1</span>] <span class="number">132</span></span><br></pre></td></tr></table></figure><h2 id="10-그룹별-연산"><a href="#10-그룹별-연산" class="headerlink" title="10 그룹별 연산"></a>10 그룹별 연산</h2><p>doBy가 데이터를 그룹별로 나눈 후 특정 계산을 적용하기 위한 함수들의 패키지인 반면 aggregate() 는 좀 더 일반적인 그룹별 연산을 위한 함수다. aggregate()를 사용하면 데이터를 그룹으로 묶은 후 임의의 함수를 그룹에 적용할 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">aggregate: 데이터를 분할하고 각 그룹마다 요약치를 계산한다.</span><br><span class="line">aggregate(</span><br><span class="line">  x, <span class="comment"># R 객체</span></span><br><span class="line">  by, <span class="comment"># 그룹으로 묶을 값의 리스트</span></span><br><span class="line">  func <span class="comment"># 그룹별로 요약치 계산에 사용할 함수</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">aggregate(</span><br><span class="line">  formula, <span class="comment"># y ~ x 형태로 y는 계산에 사용될 값이며, x는 그룹으로 묶을 때 사용할 기준 값</span></span><br><span class="line">  data, <span class="comment"># formula를 적용할 데이터</span></span><br><span class="line">  func</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">입력이 데이터 프레임인 경우, 반환 값은 그룹 값과 그룹의 요약치를 저장한 데이터 프레임이다.</span><br></pre></td></tr></table></figure><p>아이리스 데이터 에서 종별 Sepal.Width의 평균 길이를 구하는 예를 다른 함수와 비교해보자.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; aggregate(Sepal.Width ~ Species, iris, mean)</span><br><span class="line">     Species Sepal.Width</span><br><span class="line"><span class="number">1</span>     setosa       <span class="number">3.428</span></span><br><span class="line"><span class="number">2</span> versicolor       <span class="number">2.770</span></span><br><span class="line"><span class="number">3</span>  virginica       <span class="number">2.974</span></span><br><span class="line"></span><br><span class="line">&gt; tapply(iris$Sepal.Length, iris$Species, mean)</span><br><span class="line">   setosa versicolor virginica</span><br><span class="line">    <span class="number">5.006</span>      <span class="number">5.936</span>     <span class="number">6.588</span></span><br></pre></td></tr></table></figure><h2 id="11-편리한-처리를-위한-데이터의-재표현"><a href="#11-편리한-처리를-위한-데이터의-재표현" class="headerlink" title="11 편리한 처리를 위한 데이터의 재표현"></a>11 편리한 처리를 위한 데이터의 재표현</h2><p>보통 데이터 기록을 다음과 같이 한다.</p><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>3</td><td>5</td><td>4</td></tr><tr><td>2</td><td>3</td><td>5</td></tr><tr><td>9</td><td>2</td><td>7</td></tr></tbody></table><p>하지만 데이터를 활용하기 위해선 다음과 같은 형태가 처리하기 쉽다.</p><table><thead><tr><th>Medicine</th><th>Value</th></tr></thead><tbody><tr><td>A</td><td>3</td></tr><tr><td>A</td><td>2</td></tr><tr><td>A</td><td>9</td></tr><tr><td>B</td><td>5</td></tr><tr><td>B</td><td>3</td></tr><tr><td>B</td><td>2</td></tr><tr><td>C</td><td>4</td></tr><tr><td>C</td><td>5</td></tr><tr><td>C</td><td>7</td></tr></tbody></table><p>이와 같은 방식으로 정리된 형태의 데이터를 ‘Tidy Data’라고 부른다. Tidy Data는 조작이 편하고 모델링이 편하며 시각화가 쉬운 장접이 있다. Tidy Data의 정의는 다음과 같다.</p><ul><li>각 변수는 하나의 컬럼에 해당한다.</li><li>각 관찰은 한 행에 해당한다.</li><li>한 관찰 유형은 하나의 테이블을 형성한다.</li></ul><p>스프레드시트 형태로 정리된 데이터와 Tidy Data 형태의 데이터 의 변환은 stack(), unstack()으로 수행할 수 있다.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stack: 다수의 벡터를 하나의 벡터로 합치면서 관측값이 온 곳을 팩터로 명시한다.</span><br><span class="line">stack(</span><br><span class="line">  x <span class="comment"># 리스트 또는 데이터 프레임</span></span><br><span class="line">)</span><br><span class="line">반환 값은 데이터 프레임이며, values에는 x가 하나로 합쳐진 값들이 저장된다. ind에는 관측값이 온 곳을 팩터로 명시한다.</span><br><span class="line"></span><br><span class="line">unstack: stack()의 역 연산</span><br><span class="line">unstack(</span><br><span class="line">  x,</span><br><span class="line">  form <span class="comment"># ~ 왼쪽에는 관측값, 오른쪽에는 관측값이 온 곳을 표현하는 팩터를 명시한다.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="MySql-및-RMySQL-환경-설정"><a href="#MySql-및-RMySQL-환경-설정" class="headerlink" title="MySql 및 RMySQL 환경 설정"></a>MySql 및 RMySQL 환경 설정</h3><p>mysql 설치과정 생략</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql을 설치한다.</span></span><br><span class="line">&gt; install.packages(<span class="string">"RMySQL"</span>, type=<span class="string">"source"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rmysql을 불러온다.</span></span><br><span class="line">&gt; <span class="keyword">library</span>(RMySQL)</span><br></pre></td></tr></table></figure><h3 id="RMySQL을-사용한-MySQL-입출력"><a href="#RMySQL을-사용한-MySQL-입출력" class="headerlink" title="RMySQL을 사용한 MySQL 입출력"></a>RMySQL을 사용한 MySQL 입출력</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dbConnect: 데이터베이스에 접속한다.</span><br><span class="line">dbConnect(</span><br><span class="line">  drv, <span class="comment"># 데이터베이스 드라이버 </span></span><br><span class="line">  user, <span class="comment"># 사용자 이름</span></span><br><span class="line">  password, <span class="comment"># 비밀번호</span></span><br><span class="line">  dbname, <span class="comment"># 데이터베이스 이름</span></span><br><span class="line">  host <span class="comment"># 호스트</span></span><br><span class="line">)</span><br><span class="line">반환 값은 데이터 베이스 접속 객체다.</span><br><span class="line"></span><br><span class="line">dbListTables: 데이터베이스의 테이블 목록을 얻는다.</span><br><span class="line">dbListTables(</span><br><span class="line">  conn <span class="comment"># 데이터베이스 접속</span></span><br><span class="line">)</span><br><span class="line">반환 값은 데이터베이스의 테이블 목록이다.</span><br><span class="line"></span><br><span class="line">dbGetQuery(</span><br><span class="line">  conn, <span class="comment"># 데이터베이스 접속</span></span><br><span class="line">  statement <span class="comment"># 수행할 질의</span></span><br><span class="line">)</span><br><span class="line">반환 값은 질의 결과를 저장한 데이터 프레임이다.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R - R프로그래밍</title>
      <link href="/2019/03/17/R-ch3.disabled/"/>
      <url>/2019/03/17/R-ch3.disabled/</url>
      
        <content type="html"><![CDATA[<h2 id="01-R의-특징"><a href="#01-R의-특징" class="headerlink" title="01 R의 특징"></a>01 R의 특징</h2><p>(생략)</p><h2 id="02-흐름-제어-조건문과-반복문"><a href="#02-흐름-제어-조건문과-반복문" class="headerlink" title="02 흐름 제어(조건문과 반복문)"></a>02 흐름 제어(조건문과 반복문)</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cond) &#123;</span><br><span class="line">  cond가 참일 때 실행할 문장</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  cond가 거짓일 때 실행할 문장 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다수의 TRUE, FALSE 데이터를 한 번에 처리한다면 ifelse() 함수를 고려할 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ifelse(</span><br><span class="line">  test, <span class="comment"># 참, 거짓을 저장한 객체</span></span><br><span class="line">  yes, <span class="comment"># test가 참일 때 선택할 값</span></span><br><span class="line">  no <span class="comment"># test가 거짓일 때 선택할 값</span></span><br><span class="line">)</span><br><span class="line">test에 다수의 <span class="literal">TRUE</span>, <span class="literal">FALSE</span>가 저장되어 있을 때 <span class="literal">TRUE</span>에 대해서는 yes 값을, <span class="literal">FALSE</span>에 대해서는 no 값을 선택하여 반환한다.</span><br></pre></td></tr></table></figure><h3 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> data) &#123;</span><br><span class="line">  i를 사용한 문장</span><br><span class="line">&#125;</span><br><span class="line">data에 들어있는 각각의 값을 변수 i에 할당하면서 각각에 대해 블록 안의 문장을 수행한다.</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cond) &#123;</span><br><span class="line">  조건이 참일 때 수행할 문장</span><br><span class="line">&#125;</span><br><span class="line">조건 cond가 참일 때 블록 안의 문장을 수행한다.</span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">  반복해수 수행할 문장</span><br><span class="line">&#125;</span><br><span class="line">블록 안의 문장을 반복해서 수행한다. <span class="keyword">repeat</span>은 다른 언어의 do-<span class="keyword">while</span>에 해당한다.</span><br></pre></td></tr></table></figure><p>반복문 내 블록에서는 break, next 문을 사용해 반복의 수행을 조정할 수 있다.</p><ul><li>break : 반복문을 종료한다.</li><li>next: 현재 수행 중인 반복문 블록의 수행을 중단하고 다음 반복을 시작한다.</li></ul><h2 id="03-연산"><a href="#03-연산" class="headerlink" title="03 연산"></a>03 연산</h2><h3 id="수치-연산"><a href="#수치-연산" class="headerlink" title="수치 연산"></a>수치 연산</h3><ul><li>+, -, *, /: 사칙 연산</li><li>n %% m: n 을 m으로 나눈 나머지</li><li>n %/% m: n 을 m으로 나눈 몫</li><li>n^m: n의 m승</li><li>exp(n): e의 n승</li><li>log(x, base=exp(1)): logbase(x), 만약 base가 지정되지 않으면 loge(x)를 계산</li><li>log2(x), log10(x): 각각 log2(x), log10(x)를 계산</li><li>sin(x), cos(x), tan(x): 삼각함수</li></ul><h3 id="벡터-연산"><a href="#벡터-연산" class="headerlink" title="벡터 연산"></a>벡터 연산</h3><p>벡터 연산은 벡터 또는 리스트를 한 번에 연산하는 것을 말한다. 벡터 연산이 중요한 이유는 for 문 등을 사용해 값을 하나씩 처리해나가는 대신 벡터나 리스트를 한 번에 처리하는 것이 더 효율적이고 편리하기 때문이다.</p><p>예)<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&gt; x + x</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span></span><br><span class="line">&gt; x == x</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span></span><br><span class="line">&gt; x == c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">TRUE</span></span><br><span class="line">&gt; c(<span class="literal">T</span>, <span class="literal">T</span>, <span class="literal">T</span>) &amp; c(<span class="literal">T</span>, <span class="literal">F</span>, <span class="literal">T</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure></p><p>R의 함수들은 기본적으로 이러한 벡터 기반 연산을 지원한다.</p><p>예)<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&gt; sum(x)</span><br><span class="line">[<span class="number">1</span>] <span class="number">15</span></span><br><span class="line">&gt; mean(x)</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br><span class="line">&gt; median(x)</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="NA의-처리"><a href="#NA의-처리" class="headerlink" title="NA의 처리"></a>NA의 처리</h3><p>NA는 값이 기록되지 않았거나 관칙되지 않은 경우 데이터에 저장되는 값으로 ‘결측치’라고 부른다.</p><p>데이터에 NA가 포함되어 있을 경우 연산 결과가 NA로 바뀐다.</p><p>이러한 문제점을 해결하기 위해 많은 R 함수에서 na.rm을 함수 인자로 받는다. na.rm은 NA값이 있을 때 해당하는 값을 연산에서 제외할 것인지를 지정하는 데 사용한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">NA</span> + <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">NA</span></span><br><span class="line">&gt; sum(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NA</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="literal">NA</span></span><br><span class="line">&gt; sum(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NA</span>), na.rm=<span class="literal">TRUE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">6</span></span><br></pre></td></tr></table></figure><p>NA값에 따라 처리를 다르게 하는 함수들이 존재한다</p><ul><li>na.fail(object, …) : object에 NA가 포함되어 있으면 실패한다</li><li>na.omit(object, …) ; object에 NA가 포함되어 있으면 이를 제외한다.</li><li>na.exclude(object, …) : object에 NA가 포함되어 있으면 이를 제외한다는 점에서 na.omit과 동일하다. 그러나 naresid, napredict를 사용하는 함수에서 NA로 제외한 행을 결과에 다시 추가한다는 점이 다르다.</li><li>na.pass(object, …) : object에 NA가 포함되어 있더라도 통과시킨다.</li></ul><h2 id="04-함수의-정의"><a href="#04-함수의-정의" class="headerlink" title="04 함수의 정의"></a>04 함수의 정의</h2><h3 id="기본-정의"><a href="#기본-정의" class="headerlink" title="기본 정의"></a>기본 정의</h3><p>함수의 정의는 다음과 같다<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function_name &lt;- <span class="keyword">function</span>(인자, 인자, <span class="keyword">...</span>) &#123;</span><br><span class="line">  함수 본문</span><br><span class="line">  <span class="keyword">return</span>(반환 값) <span class="comment"># 반환 값이 없다면 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="가변길이-인자"><a href="#가변길이-인자" class="headerlink" title="가변길이 인자"></a>가변길이 인자</h3><p>R의 함수는 가변인자를 인자로 받을 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; f &lt;- <span class="keyword">function</span>(<span class="keyword">...</span>) &#123;</span><br><span class="line">  args &lt;- list(<span class="keyword">...</span>)</span><br><span class="line">  <span class="keyword">for</span>(a <span class="keyword">in</span> args) &#123;</span><br><span class="line">    print(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt; f(<span class="string">'3'</span>, <span class="string">'4'</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"3"</span></span><br><span class="line">[<span class="number">1</span>] <span class="string">"4"</span></span><br></pre></td></tr></table></figure><h3 id="주첩-함수"><a href="#주첩-함수" class="headerlink" title="주첩 함수"></a>주첩 함수</h3><p>함수 안에 또 다른 함수를 정의하여 사용할 수 있다. 이를 중첩함수 라고 부른다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; f &lt;- <span class="keyword">function</span>(x, y) &#123;</span><br><span class="line">  print(x)</span><br><span class="line">  g &lt;- <span class="keyword">function</span>(y) &#123;</span><br><span class="line">    print(y)</span><br><span class="line">  &#125;</span><br><span class="line">  g(y)</span><br><span class="line">&#125;</span><br><span class="line">&gt; f(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="05-스코프"><a href="#05-스코프" class="headerlink" title="05 스코프"></a>05 스코프</h2><p>코드에 기술한 변수의 사용범위를 정하는것을 스코프라고 한다. R에서는 대부분의 현대적인 프로그래밍 언어가 그러하듯이 문법적 스코프를 사용하며, 문법적 스코프는 변수가 정의된 블록 내부에서만 변수를 접근할 수 있는 구칙을 말한다.</p><p>다음은 변수n을 전역으로 선언하고 함수 내부에서 사용한 예다<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; n &lt;- <span class="number">1</span></span><br><span class="line">&gt; f &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">  print(n)</span><br><span class="line">&#125;</span><br><span class="line">&gt; f()</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt; f &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">  n &lt;- <span class="number">2</span> <span class="comment"># 함수 내부에 같은 이름의 변수가 선언될 경우 내부 지역변수가 우선된다.</span></span><br><span class="line">  print(n)</span><br><span class="line">&#125;</span><br><span class="line">&gt; f()</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>R객체를 메모리에서 삭제하거나 객체를 나열하는 함수를 알아보자</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm: 지정한 환경에서 객체를 삭제한다</span><br><span class="line">rm(</span><br><span class="line">  <span class="keyword">...</span>, <span class="comment"># 삭제할 객체의 목록</span></span><br><span class="line">  list=character(), <span class="comment"># 삭제할 객체를 나열한 벡터</span></span><br><span class="line">  envir=as.environment(pos) <span class="comment"># 객체를 삭제할 환경</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ls: 객체를 나열한다</span><br><span class="line">ls(</span><br><span class="line">  name, <span class="comment"># 객체를 나열할 환경의 이름</span></span><br><span class="line">  envir <span class="comment"># name 대신 직접 환경을 지정할 경우 사용</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>따라서 rm(list = ls())는 메모리에 있는 모든 객체를 삭제하는 명령이 된다.</p><p>함수 내부에 선언한 변수는 외부에서 접근할 수 없다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; f &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">  n &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; f()</span><br><span class="line">&gt; n</span><br><span class="line">Error : object <span class="string">'n'</span> not found</span><br></pre></td></tr></table></figure><p>함수 내부에서 전역변수에 값을 할당하려면 &lt;&lt;- 을 사용해야 한다</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; b &lt;- <span class="number">0</span></span><br><span class="line">&gt; f &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">  a &lt;- <span class="number">1</span></span><br><span class="line">  g &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">    a &lt;&lt;- <span class="number">2</span></span><br><span class="line">    b &lt;&lt;- <span class="number">2</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">  &#125;</span><br><span class="line">  g()</span><br><span class="line">  print(a)</span><br><span class="line">  print(b)</span><br><span class="line">&#125;</span><br><span class="line">&gt; f()</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="06-값에-의한-전달"><a href="#06-값에-의한-전달" class="headerlink" title="06 값에 의한 전달"></a>06 값에 의한 전달</h2><p>R에서는 모든 것이 객체다. 또, 객체는 함수 호출 시 일반적으로 값으로 전달된다. 예외상황도 있지만 대부분 객체가 값으로 넘어간다. 값으로 전달된 객체는 복제되어 넘겨지기 때문에 함수 안에서 객체를 변경해도 원래 객체는 변경되지 않는다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; f &lt;- <span class="keyword">function</span>(df2) &#123; <span class="comment">## 이상한데</span></span><br><span class="line">  df2$a &lt;- c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">&gt; df &lt;- data.frame(a=c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">&gt; f(df)</span><br><span class="line">&gt; df</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="07-객체의-불변성"><a href="#07-객체의-불변성" class="headerlink" title="07 객체의 불변성"></a>07 객체의 불변성</h2><p>R의 객체는 불변이다. 객체라는 용어는 메모리에 할당된 데이터 구조들을 뜻한다.<br>R에는 객체의 복사 추적 관련 함수가 존재한다</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">trancemem: 객체의 복사를 추적한다</span><br><span class="line">trancemem(</span><br><span class="line">  x <span class="comment"># 추적할 r 객체</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">untrancemem: 객체 복사 추적을 중단한다</span><br><span class="line">untrancemem(</span><br><span class="line">  x <span class="comment"># 추적을 중단할 R 객체</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>다음은 trancemem()을 사용하여 리스트 a를 추적하게 한 다음, 리스트 a의 값을 수정하자 a가 복사됨을 보여준다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; a &lt;- list()</span><br><span class="line">&gt; trancemem(a)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"&lt;0x081c534&gt;"</span></span><br><span class="line">&gt; a$b &lt;- c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 메모리 복사가 발생</span></span><br><span class="line">trancemem[<span class="number">0x081cd534</span> -&gt; <span class="number">0x07e773df4</span>]:</span><br><span class="line">&gt; untrancemem(a)</span><br></pre></td></tr></table></figure><h2 id="08-모듈-패턴"><a href="#08-모듈-패턴" class="headerlink" title="08 모듈 패턴"></a>08 모듈 패턴</h2><p>모듈 패턴이랑 외부에서 접근할 수 없는 데이터와 그 데이터를 제어하기 위한 함수로 구성된 구조물을 말한다.<br>모듈 패턴을 알아보기 위해 ‘큐’ 를 모듈로 구현해보자</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; q &lt;- c()</span><br><span class="line">&gt; q_size &lt;- <span class="number">0</span></span><br><span class="line">&gt; enqueue &lt; <span class="keyword">function</span>(data) &#123;</span><br><span class="line">  q &lt;&lt;- c(q, data)</span><br><span class="line">  q_size &lt;&lt;- q_size + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; dequeue &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">  first &lt;- q[<span class="number">1</span>]</span><br><span class="line">  q &lt;&lt;- q[-<span class="number">1</span>]</span><br><span class="line">  q_size &lt;&lt;- q_size - <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span>(first)</span><br><span class="line">&#125;</span><br><span class="line">&gt; size &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span>(q_size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용은 다음과 같다</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; enqueue(<span class="number">1</span>)</span><br><span class="line">&gt; enqueue(<span class="number">3</span>)</span><br><span class="line">&gt; enqueue(<span class="number">5</span>)</span><br><span class="line">&gt; print(size()) <span class="comment"># 큐 의 길이</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br><span class="line">&gt; print(dequeue())</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">&gt; print(dequeue())</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br><span class="line">&gt; print(dequeue())</span><br><span class="line">[<span class="number">1</span>] <span class="number">5</span></span><br><span class="line">&gt; print(size())</span><br><span class="line">[<span class="number">1</span>] <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="큐-모듈화"><a href="#큐-모듈화" class="headerlink" title="큐 모듈화"></a>큐 모듈화</h3><p>앞에 작성한 큐 코드는 q 변수가 전역으로 선언되어 있어서 외부에서 데이터를 조작할 수 있다. 이때 무결성이 깨지는 문제가 생기므로 이를 모듈화 해서 방지해보자.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt; queue &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">  q &lt;- c()</span><br><span class="line">  q_size &lt;- <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  enqueue &lt;- <span class="keyword">function</span>(data) &#123;</span><br><span class="line">    q &lt;&lt;- c(q, data)</span><br><span class="line">    q_size &lt;&lt;- q_size + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dequeue &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">    first &lt;- q[<span class="number">1</span>]</span><br><span class="line">    q &lt;&lt;- q[-<span class="number">1</span>]</span><br><span class="line">    q_size &lt;&lt;- q_size - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span>(first)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span>(q_size)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>(list(enqueue=enqueue, dequeue=dequeue, size=size))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">이렇게 만든 queue()는 다음과 같이 사용할 수 있다.</span><br><span class="line"></span><br><span class="line">```r</span><br><span class="line">&gt; q &lt;- queue()</span><br><span class="line">&gt; q$enqueue(1)</span><br><span class="line">&gt; q$enqueue(3)</span><br><span class="line">&gt; q$size()</span><br><span class="line">[1] 2</span><br><span class="line">&gt; q$dequeue()</span><br><span class="line">[1] 1</span><br><span class="line">&gt; q$dequeue()</span><br><span class="line">[1] 3</span><br><span class="line">&gt; q$size()</span><br><span class="line">[1] 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R - 데이터 타입</title>
      <link href="/2019/03/12/R-ch2.disabled/"/>
      <url>/2019/03/12/R-ch2.disabled/</url>
      
        <content type="html"><![CDATA[<h1 id="2장-데이터-타입"><a href="#2장-데이터-타입" class="headerlink" title="2장 데이터 타입"></a>2장 데이터 타입</h1><h2 id="스칼라"><a href="#스칼라" class="headerlink" title="스칼라"></a>스칼라</h2><p>스칼라란 단일 차원의 값을 뜻하는 것으로 숫자 1,2,3,… 을 예로 들 수 있다. 반면 평면위의 점 (1,2)는 2차원 값이므로 스칼라에 해당하지 않는다.</p><h3 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h3><p>정수, 부동소수 등을 숫자형 데이터 타입으로 지원한다.</p><h3 id="NA"><a href="#NA" class="headerlink" title="NA"></a>NA</h3><p>NA는 Not Available 의 약자로 데이터 값이 없음을 뜻한다.<br>변수에 NA값이 저장되어 있는지는 is.na() 함수로 확인한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">is.na(</span><br><span class="line">  x <span class="comment"># R의 데이터 객체</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="literal">NA</span>가 저장되어 있으면 <span class="literal">TRUE</span>, 그렇지 않으면 <span class="literal">FALSE</span>를 반환한다.</span><br></pre></td></tr></table></figure><p>예를들어, 다음은 변수 four에 NA가 저장되어 있음을 확인하는 코드다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; is.na(four)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>NULL은 NULL객체를 뜻하며, 변수가 초기화되지 않았을 때 사용한다. NULL은 NA와 구분해서 생각해야 한다. 어떤 변수에 NULL이 저장되어 있는지는 is.null()을 사용해 판단할 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">is.null(</span><br><span class="line">  x <span class="comment"># R의 데이터 객체</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">반환 값은 <span class="literal">NULL</span>이 저장되어 있으면 <span class="literal">TRUE</span>, 그렇지 않으면 <span class="literal">FALSE</span>다.</span><br></pre></td></tr></table></figure><p>다음은 is.null을 사용하는 예제이다</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- <span class="literal">NULL</span></span><br><span class="line">&gt; is.null(x)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line">&gt; is.null(<span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line">&gt; is.null(<span class="literal">NA</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line">&gt; is.na(<span class="literal">NULL</span>)</span><br><span class="line">logical(<span class="number">0</span>)</span><br><span class="line">Warning message:</span><br><span class="line">In is.na(<span class="literal">NULL</span>) : is.na() applied to non-(list or vector) of type <span class="string">'NULL'</span></span><br></pre></td></tr></table></figure><h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><p>R은 모든 문자를 문자열로 처리한다.</p><h3 id="진릿값"><a href="#진릿값" class="headerlink" title="진릿값"></a>진릿값</h3><p>TRUE, T는 모두 참 값을 의미한다. FALSE, F는 거짓 값을 의미한다. 진리값에는 &amp;(AND), |(OR), !(NOT) 연산자를 사용할 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">TRUE</span> &amp; <span class="literal">TRUE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line">&gt; <span class="literal">TRUE</span> &amp; <span class="literal">FALSE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line">&gt; <span class="literal">TRUE</span> | <span class="literal">TRUE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line">&gt; <span class="literal">TRUE</span> | <span class="literal">FALSE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line">&gt; !<span class="literal">TRUE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line">&gt; !<span class="literal">FALSE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><p>좀 더 엄밀히 말하면 TRUE와 FALSE는 예약어고 T, F는 각각 TRUE와 FALSE로 초기화된 전역 변수다. 따라서 다음과 같이 T에 FALSE를 할당하는 것이 가능하다! 반면 TRUE는 예약어 이므로 FALSE를 할당할 수 없다. 이런 이유로 TRUE, FALSE 대신 T, F라는 축약 표현을 사용할 때는 주의가 필요하다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">T</span> &lt;- <span class="literal">FALSE</span></span><br><span class="line">&gt; <span class="literal">TRUE</span> &lt;- <span class="literal">FALSE</span></span><br><span class="line">Error <span class="keyword">in</span> <span class="literal">TRUE</span> &lt;- <span class="literal">FALSE</span> : invalid (do_set) left-hand side to assignment</span><br></pre></td></tr></table></figure><p>AND나 OR 연산자에는 &amp;, | 외에도 &amp;&amp;와 ||가 있다. 이들의 차이점은 &amp;, | 는 진리값이 저장된 벡터끼리 연산할 때 요소별로 계산을 한다는 점이다.<br>&amp;&amp;, || 의 경우 벡터의 요소 간 계산을 하기 위함이 아니라 TRUE &amp;&amp; TRUE 등의 경우와 같이 두 개의 진리값끼리 연산을 하기 위한 연산자다.</p><h3 id="팩터"><a href="#팩터" class="headerlink" title="팩터"></a>팩터</h3><p>팩터(Factor) 는 범주형 데이터를 표현하기 위한 테이터 타입이다.</p><p>범주형 데이터란 데이터가 사전에 정해진 특정 유형으로만 분류되는 경우를 뜻한다.<br>범주형 테이터는 또 다시 명목형과 순서형으로 구분된다. 명목형 데이터는 값들 간에 크기 비교가 불가능한 경우를 뜻한다. 반면 순서형 데이터는 대,중,소와 같이 값에 순서를 둘 수 있는 경우를 말한다.</p><ul><li>팩터 관련 함수</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">factor( <span class="comment"># 팩터 값을 생성한다</span></span><br><span class="line">  X, <span class="comment"># 팩터로 표현하고자 하는 값</span></span><br><span class="line">  levels, <span class="comment"># 값의 레벨</span></span><br><span class="line">  ordered <span class="comment"># TRUE면 순서형, FALSE면 명목형 데이터를 뜻한다. 기본값은 FALSE</span></span><br><span class="line">)</span><br><span class="line">반환 값은 팩터형 데이터 값이다.</span><br><span class="line"></span><br><span class="line">nlevels( <span class="comment"># 팩터에서 레벨의 개수를 반환한다.</span></span><br><span class="line">  x <span class="comment"># 팩터 값 </span></span><br><span class="line">)</span><br><span class="line">반환 값은 팩터 값의 레벨 개수다.</span><br><span class="line"></span><br><span class="line">levels( <span class="comment"># 팩터에서 레벨의 목록을 반환한다.</span></span><br><span class="line">  x <span class="comment"># 팩터 값</span></span><br><span class="line">)</span><br><span class="line">반환 값은 팩터에서 레벨의 목록이다.</span><br><span class="line"></span><br><span class="line">is.factor( <span class="comment"># 주어진 값이 팩터인지를 판단한다.</span></span><br><span class="line">  x <span class="comment"># R 객체</span></span><br><span class="line">)</span><br><span class="line">반환 값은 x가 팩터면 <span class="literal">TRUE</span>, 그렇지 않으면 <span class="literal">FALSE</span>다.</span><br><span class="line"></span><br><span class="line">ordered( <span class="comment"># 순서형 팩터를 생성한다.</span></span><br><span class="line">  x <span class="comment"># 팩터로 표현하고자 하는 값(주로 문자열 백터로 지정)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">is.ordered( <span class="comment"># 순서형 팩터인지를 판단한다.</span></span><br><span class="line">  x <span class="comment"># R 객체</span></span><br><span class="line">)</span><br><span class="line">반환 값은 x가 순서형 팩터면 <span class="literal">TRUE</span>, 그렇지 않으면 <span class="literal">FALSE</span>다.</span><br></pre></td></tr></table></figure><h2 id="벡터"><a href="#벡터" class="headerlink" title="벡터"></a>벡터</h2><p>벡터는 다른 프로그래밍 언어에서 흔히 접하는 배열의 개념으로, 한 가지 스칼라 데이터 타입의 데이터를 저장할 수 있다. 예를 들면, 숫자만 저장하는 배열, 문자열만 저장하는 배열이 벡터에 해당한다.</p><h3 id="벡터-생성"><a href="#벡터-생성" class="headerlink" title="벡터 생성"></a>벡터 생성</h3><p>벡터는 c()를 사용해 생성하고, names()를 사용해 이름을 부여할 수 있다. 아래는 벡터 관련 함수이다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">주어진 값들을 모아 벡터를 생성한다.</span><br><span class="line">c(</span><br><span class="line">  <span class="keyword">...</span> <span class="comment"># 벡터로 모을 객체들</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">names: 객체의 이름을 반환한다.</span><br><span class="line">names(</span><br><span class="line">  x <span class="comment"># 이름을 얻어올 R 객체</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">names&lt;-: 객체에 이름을 저장한다.</span><br><span class="line">names(</span><br><span class="line">  x <span class="comment"># 이름을 저장할 R 객체</span></span><br><span class="line">) &lt;- value <span class="comment"># 저장할 이름</span></span><br></pre></td></tr></table></figure><h3 id="벡터-데이터-접근"><a href="#벡터-데이터-접근" class="headerlink" title="벡터 데이터 접근"></a>벡터 데이터 접근</h3><p>벡터 데이터에 접근하는 문법을 알아보자</p><ul><li>x[n] : 벡터의 n번째 요소,</li><li>x[-n] : 벡터의 n번째 요소를 제외한 나머지</li><li>x[idx_vector] : idx_vector에 지정된 요소를 얻어옴</li><li>x[start:end] : start 부터 end 까지의 값을 반환함</li></ul><p>벡터의 길이 관련 함수<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">length: 객체의 길이를 반환한다.</span><br><span class="line">length(</span><br><span class="line">  x <span class="comment"># R 객체, 팩터, 배열, 리스트를 지정한다.</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">NROW: 배열의 행 또는 열의 수를 반환한다</span><br><span class="line">NROW(</span><br><span class="line">  x <span class="comment"># 벡터, 배열 또는 데이터 프레임</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="벡터-연산"><a href="#벡터-연산" class="headerlink" title="벡터 연산"></a>벡터 연산</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">identical: 객체가 동일한지를 판단한다.</span><br><span class="line">identical(x, y)</span><br><span class="line"></span><br><span class="line">union: 합집합을 구한다.</span><br><span class="line">union(x, y)</span><br><span class="line"></span><br><span class="line">intersect: 교집합을 구한다.</span><br><span class="line">intersect(x, y)</span><br><span class="line"></span><br><span class="line">setdiff: 차집합을 구한다.</span><br><span class="line">setdiff(x, y)</span><br><span class="line"></span><br><span class="line">setequal: x와 y가 같은 집합인지 판단한다.</span><br><span class="line">setequal(x, y)</span><br></pre></td></tr></table></figure><p>다음은 벡터 연산자들이다.</p><ul><li>value %in% x : 벡터에 value가 저장되어 있는지 판단함</li><li>x + n : 벡터의 모든 요소에 n을 더한 벡터를 구함</li></ul><h3 id="연속된-숫자로-구성된-벡터"><a href="#연속된-숫자로-구성된-벡터" class="headerlink" title="연속된 숫자로 구성된 벡터"></a>연속된 숫자로 구성된 벡터</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">seq: 시퀀스를 생성한다.</span><br><span class="line">seq(</span><br><span class="line">  from, <span class="comment"># 시작 값</span></span><br><span class="line">  to, <span class="comment"># 끝 값</span></span><br><span class="line">  by <span class="comment"># 증가치</span></span><br><span class="line">)</span><br><span class="line">from부터 to 까지의 값을 by 간격으로 저장한 숫자 벡터를 반환한다.</span><br><span class="line"></span><br><span class="line">seq_along: 주어진 객체의 길이만큼 시퀀스를 생성한다.</span><br><span class="line">seq_along(</span><br><span class="line">  along.with <span class="comment"># 이 인자 길이만큼 시퀀스를 생성한다.</span></span><br><span class="line">)</span><br><span class="line">반환 값은 along.with의 길이가 N일 때, <span class="number">1</span> 부터 N까지의 숫자를 저장한 벡터다.</span><br></pre></td></tr></table></figure><h3 id="반복된-값을-저장한-벡터"><a href="#반복된-값을-저장한-벡터" class="headerlink" title="반복된 값을 저장한 벡터"></a>반복된 값을 저장한 벡터</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rep: 주어진 값을 반복한다.</span><br><span class="line">rep(</span><br><span class="line">  x, <span class="comment"># 반복할 값이 저장된 벡터</span></span><br><span class="line">  times, <span class="comment"># 전체 벡터의 반복 횟수</span></span><br><span class="line">  each <span class="comment"># 개별 값의 반복 횟수</span></span><br><span class="line">)</span><br><span class="line">반환 값은 반복된 값이 저장된 x와 같은 타입의 객체다.</span><br></pre></td></tr></table></figure><h2 id="리스트"><a href="#리스트" class="headerlink" title="리스트"></a>리스트</h2><p>R에서 리스트는 다른 언어의 해시 테이블이나 딕셔너리와 비슷하다. 키,값 형태의 데이터를 담는 연관배열의 형태를 하고있다.</p><h3 id="리스트-생성"><a href="#리스트-생성" class="headerlink" title="리스트 생성"></a>리스트 생성</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list: 리스트 객체를 생성한다.</span><br><span class="line">list(</span><br><span class="line">  key1 = value1,</span><br><span class="line">  key2 = value2,</span><br><span class="line">  <span class="keyword">...</span></span><br><span class="line">)</span><br><span class="line">반환 값은 key1에 value1, key2에 value2 등을 저장한 리스트다.</span><br></pre></td></tr></table></figure><h3 id="리스트-데이터-접근"><a href="#리스트-데이터-접근" class="headerlink" title="리스트 데이터 접근"></a>리스트 데이터 접근</h3><ul><li>x$key : 리스트에서 키 값 key에 해당하는 값</li><li>x[n] : 리스트에서 n번째 데이터의 서브리스트</li><li>x : 리스트에서 n번째 저장된 값</li></ul><h2 id="행렬"><a href="#행렬" class="headerlink" title="행렬"></a>행렬</h2><h3 id="행렬-생성"><a href="#행렬-생성" class="headerlink" title="행렬 생성"></a>행렬 생성</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">matrix: 행렬을 생성한다.</span><br><span class="line">matrix(</span><br><span class="line">  data, <span class="comment"># 행렬을 생성할 데이터 벡터</span></span><br><span class="line">  nrow, <span class="comment"># 행의 수</span></span><br><span class="line">  ncol, <span class="comment"># 열의 수</span></span><br><span class="line">  byrow=<span class="literal">FALSE</span>, <span class="comment"># TRUE로 설정하면 행우선, FALSE일 경우 열 우선으로 데이터를 채운다.</span></span><br><span class="line">  dimnames=<span class="literal">NULL</span> <span class="comment"># 행렬의 각 차원에 부여할 이름</span></span><br><span class="line">)</span><br><span class="line">반환 값은 행렬이다.</span><br><span class="line"></span><br><span class="line">dimnames: 객체의 각 차원에 대한 이름을 가져온다.</span><br><span class="line">dimnames(</span><br><span class="line">  x <span class="comment"># R 객체</span></span><br><span class="line">)</span><br><span class="line">반환 값은 객체 x의 각 차원에 대한 이름이다.</span><br><span class="line"></span><br><span class="line">dimnames&lt;- :객체의 차원에 이름을 설정한다.</span><br><span class="line">dimnames(</span><br><span class="line">  x <span class="comment"># R 객체</span></span><br><span class="line">) &lt;- value <span class="comment"># 차원에 부여할 이름</span></span><br><span class="line"></span><br><span class="line">rownames: 행렬의 행 이름을 가져온다</span><br><span class="line">rownames(</span><br><span class="line">  x <span class="comment"># 2차원 이상의 행렬과 유사한 객체</span></span><br><span class="line">)</span><br><span class="line">반환 값은 행 이름이다.</span><br><span class="line"></span><br><span class="line">rownames&lt;-: 행렬의 행 이름을 설정한다.</span><br><span class="line">rownames(</span><br><span class="line">  x <span class="comment"># 2차원 이상의 행렬과 유사한 객체</span></span><br><span class="line">) &lt;- value <span class="comment"># NULL 또는 x 와 같은 길이의 문자열 벡터</span></span><br><span class="line"></span><br><span class="line">colnames: 행렬의 열 이름을 가져온다.</span><br><span class="line">colnames(</span><br><span class="line">  x <span class="comment"># 2차원 이상의 행렬과 유사한 객체</span></span><br><span class="line">)</span><br><span class="line">반환 값은 열 이름이다.</span><br><span class="line"></span><br><span class="line">colnames &lt;- : 행렬의 열 이름을 설정한다.</span><br><span class="line">colnames(</span><br><span class="line">  x <span class="comment"># 2차원 이상의 행렬과 유사한 객체</span></span><br><span class="line">) &lt;- value <span class="comment"># NULL 또는 x와 같은 길이의 문자열 벡터</span></span><br></pre></td></tr></table></figure><h3 id="행렬-데이터-접근"><a href="#행렬-데이터-접근" class="headerlink" title="행렬 데이터 접근"></a>행렬 데이터 접근</h3><ul><li>A[ridx, cidx] : 행렬 A의 ridx행, cidx열에 저장된 값.</li></ul><h3 id="행렬-연산"><a href="#행렬-연산" class="headerlink" title="행렬 연산"></a>행렬 연산</h3><ul><li>A + x : 행렬 A의 모든 값에 스칼라 x를 더한다(사칙연산 동일)</li><li>A + B : 행렬 A와 행렬 B의 합을 구한다.</li><li>A %*% B : 행렬 A와 행렬 B의 곱을 구한다.</li></ul><p>다음은 행렬 연산과 관련된 함수들이다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">t 행렬 또는 데이터 프레임의 전치 행렬을 구한다</span><br><span class="line">t(</span><br><span class="line">  x <span class="comment"># 행렬 또는 데이터 프레임</span></span><br><span class="line">)</span><br><span class="line">반환 값은 x의 전치 행렬이다.</span><br><span class="line"></span><br><span class="line">solve 수식 a %*% x = b 에서 x를 구한다</span><br><span class="line">solve(</span><br><span class="line">  a, <span class="comment"># 행렬</span></span><br><span class="line">  b  <span class="comment"># 벡터 또는 행렬</span></span><br><span class="line">)</span><br><span class="line">반환 값은 x다. b를 지정하지 않으면 a의 역행렬을 구한다.</span><br><span class="line"></span><br><span class="line">nrow 배열의 행의 수를 구한다.</span><br><span class="line">nrow(</span><br><span class="line">  x <span class="comment"># 벡터, 배열 또는 데이터 프레임</span></span><br><span class="line">)</span><br><span class="line">반환 값은 x의 행의 수다.</span><br><span class="line"></span><br><span class="line">ncol 배열의 열의 수를 구한다.</span><br><span class="line">ncol(</span><br><span class="line">  x <span class="comment"># 벡터, 배열 또는 데이터 프레임</span></span><br><span class="line">)</span><br><span class="line">행렬의 열의 수를 반환한다.</span><br><span class="line"></span><br><span class="line">dim 객체의 차원 수를 구한다.</span><br><span class="line">dim(</span><br><span class="line">  x <span class="comment"># 행렬, 배열 또는 데이터 프레임</span></span><br><span class="line">)</span><br><span class="line">행렬의 차원수를 반환한다.</span><br><span class="line"></span><br><span class="line">dim&lt;- 객체의 차원 수를 지정한다.</span><br><span class="line">dim(</span><br><span class="line">  x <span class="comment"># 행렬, 배열 또는 데이터 프레임</span></span><br><span class="line">) &lt;- value <span class="comment"># 객체의 차원</span></span><br></pre></td></tr></table></figure><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><p>행렬이 2차원 데이터라면 배열은 다차원 데이터다. 예를 들어, 2x3 차원의 데이터를 행렬로 표현한다면 2x3x4 차원의 데이터는 배열로 표현한다.</p><h3 id="배열-생성"><a href="#배열-생성" class="headerlink" title="배열 생성"></a>배열 생성</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array 배열을 생성한다.</span><br><span class="line">array(</span><br><span class="line">  data=<span class="literal">NA</span>, <span class="comment"># 데이터를 저장한 벡터</span></span><br><span class="line">  dim=length(data), <span class="comment"># 배열의 차원. 이값을 지정하지 않으면 1차원 배열이 생성된다.</span></span><br><span class="line">  dimnames=<span class="literal">NULL</span> <span class="comment"># 차원의 이름</span></span><br><span class="line">)</span><br><span class="line">배열을 반환한다.</span><br></pre></td></tr></table></figure><h3 id="배열의-데이터-접근"><a href="#배열의-데이터-접근" class="headerlink" title="배열의 데이터 접근"></a>배열의 데이터 접근</h3><p>배열의 데이터 접근 방법은 행렬의 경우와 차원의 수만 다를 뿐이지 차이가 없다. 따라서 색인, 이름 등오로 데이터를 접근할 수 있고 dim()을 사용해 데이터의 차원을 알 수 있다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (x &lt;- array(<span class="number">1</span>:<span class="number">12</span>, dim=c(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)))</span><br><span class="line">&gt; x[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">&gt; dim(x)</span><br></pre></td></tr></table></figure><h2 id="데이터-프레임"><a href="#데이터-프레임" class="headerlink" title="데이터 프레임"></a>데이터 프레임</h2><p>데이터 프레임은 처리할 데이터를 마치 엑셀의 스프레드시트와 같이 표 형태로 정리한 모습을 하고 있다. 데이터 프레임의 각 열에는 관측값의 이름이 저장되고, 각 행에는 매 관측 단위마다 실제 얻어진 값이 저장된다.</p><h3 id="데이터-프레임-생성"><a href="#데이터-프레임-생성" class="headerlink" title="데이터 프레임 생성"></a>데이터 프레임 생성</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data.frame 데이터 프레임을 생성한다.</span><br><span class="line">data.frame(</span><br><span class="line">  <span class="comment"># value 또는 tag=value로 표현된 데이터 값. '...'은 가변 인자를 의미한다.</span></span><br><span class="line">  <span class="keyword">...</span>,</span><br><span class="line">  <span class="comment"># 주어진 문자열을 팩터로 저장할 것인지 또는 문자열로 저장할 것인지를 지정하는 인자.</span></span><br><span class="line">  <span class="comment"># 기본값은 보통 TRUE다. 따라서 이 인자를 지정하지 않으면 문자열은 팩터로 저장된다.</span></span><br><span class="line">  stringsAsFactors=default.stringsAsFactors()</span><br><span class="line">)</span><br><span class="line">데이터 프레임을 반환한다.</span><br><span class="line"></span><br><span class="line">str 임의의 R 객체의 내부 구조를 보인다.</span><br><span class="line">str(</span><br><span class="line">  object <span class="comment"># 구조를 살펴볼 R 객체</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="데이터-프레임-사용-문법"><a href="#데이터-프레임-사용-문법" class="headerlink" title="데이터 프레임 사용 문법"></a>데이터 프레임 사용 문법</h3><ul><li>d$colname : 데이터 프레임 d에서 컬럼 이름이 colname인 데이터를 접근한다.</li><li>d$colname &lt;- y : 데이터 프레임 d에서 컬럼 이름이 colname인 컬럼에 데이터 y를 저장한다. 만약 colname이 d에 없는 새로운 이름이라면 새로운 컬럼이 추가된다.</li></ul><h3 id="데이터-프레임-접근"><a href="#데이터-프레임-접근" class="headerlink" title="데이터 프레임 접근"></a>데이터 프레임 접근</h3><ul><li>d$colname : 데이터 프레임 d의 컬럼 이름 colname에 저장된 데이터</li><li>d[m, n, drop=TRUE] : 데이터 프레임 d의 m행 n컬럼에 저장된 데이터</li></ul><h3 id="유틸리티-함수"><a href="#유틸리티-함수" class="headerlink" title="유틸리티 함수"></a>유틸리티 함수</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">head 객체의 처음 부분을 반환한다.</span><br><span class="line">head(</span><br><span class="line">  x, <span class="comment"># 객체</span></span><br><span class="line">  n=<span class="number">6L</span> <span class="comment"># 반환할 결과 값의 크기</span></span><br><span class="line">)</span><br><span class="line">x의 앞부분을 n만큼 잘라낸 데이터다.</span><br><span class="line"></span><br><span class="line">tail 객체의 뒷부분을 반환한다.</span><br><span class="line">tail(</span><br><span class="line">  x, <span class="comment"># 객체</span></span><br><span class="line">  n=<span class="number">6L</span> <span class="comment"># 반환할 결과 값의 크기</span></span><br><span class="line">)</span><br><span class="line">x의 뒷부분을 n만큼 잘라낸 데이터다.</span><br><span class="line"></span><br><span class="line">View 데이터 뷰어를 호출한다.</span><br><span class="line">View(</span><br><span class="line">  x, <span class="comment"># 데이터 프레임으로 강제 형 변환한 뒤 뷰어로 볼 데이터</span></span><br><span class="line">  title <span class="comment"># 뷰어 윈도우의 제목</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="타입-판별"><a href="#타입-판별" class="headerlink" title="타입 판별"></a>타입 판별</h2><ul><li>class(x) : 객체 x의 클래스</li><li>str(x) : 객체 x의 내부 구조</li><li>is.factor(x) : 팩터여부</li><li>is.numeric(x) : 숫자를 저장한 백터인가</li><li>is.character(x) : 문자열을 저장한 벡터인가</li><li>is.matrix(x) : 행렬인가</li><li>is.array(x) : 배열인가</li><li>is.data.frame(x) : 데이터 프레임인가</li></ul><h2 id="타입-변환"><a href="#타입-변환" class="headerlink" title="타입 변환"></a>타입 변환</h2><ul><li>as.factor(x) : 팩터로 변환</li><li>as.numeric(x) : 숫자형 벡터로 변환</li><li>as.character(x) : 문자형 벡터로 변환</li><li>as.matrix(x) : 행렬로 변환</li><li>as.array(x) : 배열로 변환</li><li>as.data.frame(x) : 데이터 프레임으로 변환</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo cactus 사용방법</title>
      <link href="/2019/03/12/cactus-readme/"/>
      <url>/2019/03/12/cactus-readme/</url>
      
        <content type="html"><![CDATA[<h1 id="Cactus"><a href="#Cactus" class="headerlink" title="Cactus"></a>Cactus</h1><p>A responsive, clean and simple <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> theme for a personal website.</p><p>:cactus: <a href="https://probberechts.github.io/hexo-theme-cactus/" target="_blank" rel="noopener">Demo</a></p><p><img src="https://docs.google.com/uc?id=1K66bccwr4z9TgJev0AzCqbI7BxzVr7md" alt="screenshot"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul><li><a href="#general">General</a></li><li><a href="#features">Features</a></li><li><a href="#install">Install</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#license">License</a></li></ul><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><ul><li><strong>Version</strong> : 3.0</li><li><strong>Compatibility</strong> : Hexo 3 or later</li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>Fully responsive</li><li>Multiple color schemes</li><li>Pick your own code highlighting scheme</li><li>Configurable navigation menu</li><li>Support for local search</li><li>Projects list</li><li>I18n support</li><li>Disqus integration</li><li>Google analytics / Baidu Tongji</li><li>Font Awesome icons</li><li>Simplicity</li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ol><li><p>In the <code>root</code> directory:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus</span><br></pre></td></tr></table></figure></li><li><p>Change the <code>theme</code> property in the <code>config.yml</code> file.</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">cactus</span></span><br></pre></td></tr></table></figure><p> See below for more information on how to customize this theme.</p></li><li><p>Create pages and articles with the <code>hexo new [layout] &lt;title&gt;</code> command.<br> For example, to create an “about me” page, run:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p> This will create a new file in <code>source/about/index.md</code><br> Similary, you can create a new article with</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><p> and add some interesting content in <code>source/_posts/hello-world.md</code>.</p></li><li><p>Run: <code>hexo generate</code> and <code>hexo server</code></p></li><li><p><a href="https://hexo.io/docs/deployment" target="_blank" rel="noopener">Publish your blog</a>!</p></li></ol><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>You can (and should) modify a couple of settings. An overview of all settings<br>can be found in  <a href="_config.yml">_config.yml</a>. The most important ones are<br>discussed below.</p><p>There are two possible methods to override the defaults. As a first option,<br>you could fork the theme and maintain a custom branch with your settings.<br>Alternatively, you can configure it from your site’s primary configuration<br>file. Therefore, define your custom settings under the <code>theme_config</code> variable.<br>For example:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line"><span class="attr">  colorscheme:</span> <span class="string">white</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># themes/cactus/_config.yml</span></span><br><span class="line"><span class="attr">colorscheme:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>This will override the default black colorscheme in <code>themes/cactus/_config.yml</code>.</p><h3 id="Color-scheme"><a href="#Color-scheme" class="headerlink" title="Color scheme"></a>Color scheme</h3><p>Currently, this theme is delivered with four color schemes: <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/" target="_blank" rel="noopener">dark</a>, <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-light/public/" target="_blank" rel="noopener">light</a>,<br><a href="https://probberechts.github.io/hexo-theme-cactus/cactus-white/public/" target="_blank" rel="noopener">white</a> and <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-classic/public/" target="_blank" rel="noopener">classic</a>. Set your preferred color scheme in the <code>_config.yml</code> file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">colorscheme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><p>Alternatively, you can easily create your own color scheme by creating a new<br>file in <code>source/css/_colors</code>.</p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><p>Setup the navigation menu in the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">  Home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  About:</span> <span class="string">/about/</span></span><br><span class="line"><span class="attr">  Writing:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">  Projects:</span> <span class="attr">http://github.com/probberechts</span></span><br><span class="line"><span class="attr">  LINK_NAME:</span> <span class="string">URL</span></span><br></pre></td></tr></table></figure><h3 id="Blog-posts-list-on-home-page"><a href="#Blog-posts-list-on-home-page" class="headerlink" title="Blog posts list on home page"></a>Blog posts list on home page</h3><p>You have two options for the list of blog posts on the home page:</p><ul><li><p>Show only the 5 most recent posts (default)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">posts_overview:</span></span><br><span class="line"><span class="attr">  show_all_posts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  post_count:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>Show all posts</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">posts_overview:</span></span><br><span class="line"><span class="attr">  show_all_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Projects-list"><a href="#Projects-list" class="headerlink" title="Projects list"></a>Projects list</h3><p>Create a projects file <code>source/_data/projects.json</code> to show a list of your projects on the index page.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Hexo"</span>,</span><br><span class="line">       <span class="attr">"url"</span>:<span class="string">"https://hexo.io/"</span>,</span><br><span class="line">       <span class="attr">"desc"</span>:<span class="string">"A fast, simple &amp; powerful blog framework"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Font Awesome"</span>,</span><br><span class="line">       <span class="attr">"url"</span>:<span class="string">"http://fontawesome.io/"</span>,</span><br><span class="line">       <span class="attr">"desc"</span>:<span class="string">"The iconic font and CSS toolkit"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Social-media-links"><a href="#Social-media-links" class="headerlink" title="Social media links"></a>Social media links</h3><p>Cactus can automatically add links to your social media accounts.<br>Therefore, update the theme’s <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social_links:</span></span><br><span class="line"><span class="attr">  github:</span> <span class="string">your-github-url</span></span><br><span class="line"><span class="attr">  twitter:</span> <span class="string">your-twitter-url</span></span><br><span class="line"><span class="attr">  NAME:</span> <span class="string">your-NAME-url</span></span><br></pre></td></tr></table></figure><p>where <code>NAME</code> is the name of a <a href="https://fontawesome.com/icons?d=gallery&amp;s=brands" target="_blank" rel="noopener">Font Awesome icon</a>.</p><h3 id="Language-configuration"><a href="#Language-configuration" class="headerlink" title="Language configuration"></a>Language configuration</h3><p>If you are new to Hexo and internationalization (i18n), please read<br><a href="https://hexo.io/docs/internationalization.html" target="_blank" rel="noopener">Hexo documentation - internationalization (i18n) section</a></p><p>Currently, the theme is delivered with support for:</p><ul><li>English (en), default</li><li>Brazilian Portuguese (pt-br)</li><li>Catalan (ca)</li><li>Chinese (Simplified, PRC) (zh-CN)</li><li>Dutch (nl)</li><li>French (fr)</li><li>Italian (it)</li><li>Persian (fa)</li><li>Russian (ru)</li><li>Spanish (es)</li></ul><p>If you would like to use one the languages listed above, simply set <code>language</code><br>to the desired language (e.g., <code>fr</code>) in <code>_config.yml</code>.<br>Otherwise, you can follow the steps below (E.g., to add a Japanese (ja) translation):</p><ol><li>Set <code>language</code> to <code>ja</code> in Hexo configuration file <code>_config.yml</code></li><li>Create a <code>ja.yml</code> file in the <code>themes/cactus/languages/</code> folder</li><li>Copy the content of <code>themes/cactus/languages/default.yml</code> and paste it it into the <code>ja.yml</code> file</li><li>Replace all English strings by their Japanese translation</li></ol><p><strong>Note: Cactus does not support multi-language sites.</strong></p><h3 id="RTL-support"><a href="#RTL-support" class="headerlink" title="RTL support"></a>RTL support</h3><p>This theme support RTL languages for Persian and Arabic language.<br>If you would like to use RTL layout, change <code>direction</code> attribute in <code>_config.yml</code> to <code>rtl</code>.<br>Note that this also will change the font to <a href="https://github.com/rastikerdar/vazir-font" target="_blank" rel="noopener">Vazir</a>, wich is a Persian font.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">direction: rtl</span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>Set the <code>rss</code> field in the <code>_config.yml</code> to one of the following values:</p><ol><li><code>rss: false</code> will totally disable rss (default).</li><li><code>rss: atom.xml</code> sets a specific feed link.</li><li><code>rss:</code>leave empty to use the <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> plugin.</li></ol><h3 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h3><p>Add you Google Analytics or Baidu Tongji <code>tracking_id</code> to the <code>_config.yml</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">'UA-49627206-1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidu_analytics:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="number">2e6</span><span class="string">da3c375c8a87f5b664cea6d4cb29c</span></span><br></pre></td></tr></table></figure><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>First, create a site on Disqus: <a href="http://disqus.com/admin/create/" target="_blank" rel="noopener">https://disqus.com/admin/create/</a>.</p><p>Next, update the <code>_config.yml</code> file:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">SITENAME</span></span><br></pre></td></tr></table></figure><p>where <code>SITENAME</code> is the name you gave your site on Disqus.</p><h3 id="Code-Highlighting"><a href="#Code-Highlighting" class="headerlink" title="Code Highlighting"></a>Code Highlighting</h3><p>Pick one of <a href="https://github.com/probberechts/hexo-theme-cactus/tree/master/source/css/_highlight" target="_blank" rel="noopener">the available colorschemes</a> and add it to the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span> <span class="string">COLORSCHEME_NAME</span></span><br></pre></td></tr></table></figure><h3 id="Tags-and-categories"><a href="#Tags-and-categories" class="headerlink" title="Tags and categories"></a>Tags and categories</h3><p>Tags and categories can be included in the front-matter of your posts. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: Tags and Categories</span><br><span class="line">date: 2017-12-24 23:29:53</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>Foo</span><br><span class="line"><span class="bullet">- </span>Bar</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>Baz</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">This post contains 2 tags and 1 category.</span><br></pre></td></tr></table></figure><p>You can create a page with a tag cloud by running:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>Next, add <code>type: tags</code> to the front-matter of <code>source/tags/index.md</code>. You can also<br>add a tag cloud to the home page by setting the <code>tags_overview</code> option to <code>true</code>.</p><p>Similarly, you can create a page with an overview of all categories by running:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>and adding <code>type: categories</code> to the front-matter of <code>source/categories/index.md</code>. </p><h3 id="Local-search"><a href="#Local-search" class="headerlink" title="Local search"></a>Local search</h3><p>First, install the <a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">hexo-generate-search</a><br>plugin, which will generate a search index file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>Next, create a page to display the search engine:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page search</span><br></pre></td></tr></table></figure><p>and put <code>type: search</code> in the front-matter.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Search</span><br><span class="line">type: search</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>Finally, edit the <code>_config.yml</code> and add a link to the navigation menu.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">  search:</span> <span class="string">/Search/</span></span><br></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ionic issue 02</title>
      <link href="/2019/01/15/ionic-issue-02/"/>
      <url>/2019/01/15/ionic-issue-02/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><p>ionic3 에서 ngrx를 사용하려 했으나 에러와 함께 작동되지 않았다.</p><p>같은 예제를 Angular에서 돌려봣을때 문제가 없었다.</p><h2 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h2><p>ionic3버젼에서 Angular5를 사용하고 있었고 @ngrx/store를 그냥 깔면 7버젼이 깔려 서로 호환이 안된다는걸 알게되었다.</p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>@ngrx/store@5 라는 명령어를 이용해서 5버젼을 깔면 ionic3에서도 ngrx/store를 사용할 수 있다. 아무래도 Angular 와 ngrx 의 버젼이 같아야 호환이 되는듯하다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 문제해결 </tag>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ngrx 튜토리얼 - Store</title>
      <link href="/2019/01/10/ngrx-tutorial-01/"/>
      <url>/2019/01/10/ngrx-tutorial-01/</url>
      
        <content type="html"><![CDATA[<h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><p>해당 사이트의 설명을 대부분 참조했고 제 나름대로의 설명을 추가했습니다.<br><a href="https://coursetro.com/posts/code/151/Angular-Ngrx-Store-Tutorial---Learn-Angular-State-Management" target="_blank" rel="noopener">https://coursetro.com</a></p><h2 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h2><p>angular-cli를 이용해서 프로젝트를 생성합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng new ngrx-tut</span><br><span class="line"><span class="built_in">cd</span> ngrx-tut</span><br></pre></td></tr></table></figure><p>프로젝트에 ngrx/store 를 설치합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @ngrx/store --save</span><br></pre></td></tr></table></figure></p><p>작업을 위해 프로젝트를 띄워봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure><p>별 다른 작업을 하지않았다면 다음 링크로 프로젝트를 볼 수 있습니다.<br><a href="http://localhost:4200" target="_blank" rel="noopener">http://localhost:4200</a></p><h2 id="Model-생성"><a href="#Model-생성" class="headerlink" title="Model 생성"></a>Model 생성</h2><p>다음 경로에 파일을 생성하고 모델을 정의해봅시다.<br>/src/app/models/tutorial.model.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface Tutorial &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  url: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Action-생성"><a href="#Action-생성" class="headerlink" title="Action 생성"></a>Action 생성</h2><p>ngrx에서 사용되는 Action은 두가지 요소를 가지고 있습니다.</p><ol><li>type: 보통 Action의 이름을 정의합니다. </li><li>payload: Action에 필요한 parameters를 저장할 수 있는 객체입니다.</li></ol><p>Action는 마치 Event의 이름들을 정의해놓은 느낌이 있습니다. 여기서 정의한 Action을 Reducer에서 사용하며 Action.type을 통해 각각의 동작을 정의해주게 됩니다.</p><p>다음 경로에 Action을 생성해봅시다.<br>/src/app/actions/tutorial.actions.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TUTORIAL = <span class="string">'[TUTORIAL] Add'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REMOVE_TUTORIAL = <span class="string">'[TUTORIAL] Remove'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTutorial</span> <span class="title">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">  readonly type = ADD_TUTORIAL</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public payload: Tutorial) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">REmoveTutorial</span> <span class="title">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">  readonly type = REMOVE_TUTORIAL</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public payload: number) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Actions = AddTutorial | RemoveTutorial</span><br></pre></td></tr></table></figure></p><h2 id="Reducer-생성"><a href="#Reducer-생성" class="headerlink" title="Reducer 생성"></a>Reducer 생성</h2><p>앞서 말했던것처럼 Reducer는 입력된 Action의 type을 통해 해야 할 동작을 명시해줍니다. MVC의 Controller 느낌이랑 비슷합니다.</p><p>다음 경로에 Reducer를 생성해봅시다.<br>/src/app/reducers/tutorial.reducer.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Section 1</span></span><br><span class="line"><span class="keyword">const</span> initialState: Tutorial = &#123;</span><br><span class="line">  name: <span class="string">'Initial Tutorial'</span>,</span><br><span class="line">  url: <span class="string">'http://google.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">tutorialReducer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  state: Tutorial[] = [initialState], </span></span></span><br><span class="line"><span class="function"><span class="params">  action: TutorialActions.Actions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Section 2</span></span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> TutorialActions.ADD_TUTORIAL:</span><br><span class="line">      <span class="keyword">return</span> [...state, action.payload];</span><br><span class="line">    <span class="keyword">case</span> TutorialActions.REMOVE_TUTORIAL:</span><br><span class="line">      state.splice(action.payload, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>Section 1<br>초기값으로 사용하기 위한 데이터를 만들어줍니다. 실제로는 데이터가 없을때의 Model을 정의해놓는등 다양하게 활용할 수 있습니다.</p></li><li><p>Section 2<br>switch 문에 action.type을 이용해서 동작 방식을 결정합니다. 여기선 case 안에 로직을 넣어놧지만 상황에 따라 로직을 분리해서 사용하는것도 좋습니다.</p></li></ul><h2 id="App-State-생성"><a href="#App-State-생성" class="headerlink" title="App State 생성"></a>App State 생성</h2><p>State 는 ‘상태’ 라는 말로 번역하기는 좀 이해하기 어려운듯 합니다. 기존의 ‘변수’라는 말과 상당히 유사하게 사용됩니다. component 기반 개발을 하다보면 각각 다른 위치에 있는 component가 같은 데이터를 공유하는 상황이 종종 생기는데, 이를 컴포넌트 자체에서 처리하는건 굉장히 복잡합니다. </p><p>그래서 SingleTon 패턴 형식으로 데이터를 다루게 되는데 여기서 사용되는 App State도 그러한 종류 중 하나로 보면 될듯합니다.</p><p>다음 경로에 app.state.ts를 만들어 봅시다.<br>/src/app/app.state.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'./models/tutorial.model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface AppState &#123;</span><br><span class="line">  readonly tutorial: Tutorial[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="app-module-ts-변경"><a href="#app-module-ts-변경" class="headerlink" title="app.module.ts 변경"></a>app.module.ts 변경</h2><p>이제 지금까지 만든 store를 등록하는 과정입니다.<br>app.module.ts의 import 에 StoreModule을 추가해 봅시다.<br>/src/app/app.module/ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'./app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StoreModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tutorialReducer &#125; <span class="keyword">from</span> <span class="string">'./reducers/tutorial.reducer'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    StoreModule.forRoot(&#123;</span><br><span class="line">      tutorial: tutorialReducer</span><br><span class="line">    &#125;),</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Component-생성"><a href="#Component-생성" class="headerlink" title="Component 생성"></a>Component 생성</h2><p>tutorial reducer를 동작할 component를 만들어봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng g c <span class="built_in">read</span></span><br><span class="line">ng g c create</span><br></pre></td></tr></table></figure><h2 id="Read-Component"><a href="#Read-Component" class="headerlink" title="Read Component"></a>Read Component</h2><p>해당 경로에 read 컴포넌트를 다음과 같이 작성해줍니다.<br>/src/app/read/read.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; <span class="keyword">from</span> <span class="string">'../app.state'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-read'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./read.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./read.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Section 1</span></span><br><span class="line">  tutorials: Observable&lt;Tutorial[]&gt;;</span><br><span class="line">  <span class="comment">// Section 2</span></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private store: Store&lt;AppState&gt;</span><br><span class="line">  ) &#123; </span><br><span class="line">    <span class="keyword">this</span>.tutorials = <span class="keyword">this</span>.store.select(<span class="string">'tutorial'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Section 1<br>tutorials라는 Observable을 정의했습니다. 차후에 HTML에서 사용될 변수입니다.</p></li><li><p>Section 2<br>store.select를 통해 tutorial을 불러왔습니다. app.module.ts의 StoreModule.forRoot({}) 에 정의해둔 reducer를 불러오는 동작을 합니다.</p></li></ul><p>이제 HTML을 작성해봅시다.<br>/src/app/read/read.component.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> *<span class="attr">ngIf</span>=<span class="string">"tutorials"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Tutorials<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let tutorial of tutorials | async"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">"tutorial.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; tutorial.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>HTML과 Angular 문법이기 때문에 딱히…. 여기서 설명드리지 않겟습니다.<br>그래도 조금 설명 하자면 *ngFor 는 javascript의 for…of 반복문을 생각하시면 됩니다.<br>async는 tutorials가 Observable이기 때문에 AsyncPipe를 사용해서 자동으로 subscribe 해줍니다.</p><p>이제 app.component에서 read.component 를 사용해봅시다.<br> /src/app/app.component.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-create</span>&gt;</span><span class="tag">&lt;/<span class="name">app-create</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-read</span>&gt;</span><span class="tag">&lt;/<span class="name">app-read</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css도 조금 추가해주겟습니다.</p><p>/src/styles.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Arial'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(50% - 6em);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>여기까지가 등록된 리스트를 보는 방법입니다.</p><h2 id="Create-Component"><a href="#Create-Component" class="headerlink" title="Create Component"></a>Create Component</h2><p>ngrx의 동작은 action -&gt; dispatch -&gt; reducer -&gt; state 변경 이런 순 입니다.<br>이런 동작을 잘 알아보기 위해 Create 동작을 해보겟습니다.</p><p>다음과 같이 Create component 를 작성해봅시다<br>/src/app/create/create.component.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; <span class="keyword">from</span> <span class="string">'../app.state'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">"../actions/tutorial.actions"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-create'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./create.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./create.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private store: Store&lt;AppState&gt;</span><br><span class="line">  ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  addTutorial(name, url)&#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(<span class="keyword">new</span> TutorialActions.AddTutorial(&#123;name, url&#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Create Html 입니다.<br>/src/app/create/create.component.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> #<span class="attr">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"url"</span> #<span class="attr">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"addTutorial(name.value,url.value)"</span>&gt;</span>Add a Tutorial<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CreateComponent 에서 addTutorial() 을 사용하면 TutorialActions.AddTutorial의 action을 통해 해당하는 reducer 동작을 합니다.</p><h2 id="Remove-구현"><a href="#Remove-구현" class="headerlink" title="Remove 구현"></a>Remove 구현</h2><p>remove를 구현하기 위해 read.component.html 을 다음과 같이 바꿔봅시다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> *<span class="attr">ngIf</span>=<span class="string">"tutorials"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Tutorials<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let tutorial of tutorials | async; let i = index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">"tutorial.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; tutorial.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"delTutorial(i)"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>delTutorial을 수행하는 button이 추가되었고 for…of 안에 index를 사용하는 구문이 추가되었습니다.</p><p>이제 read.component.ts 와 tutorial.reducer.ts에 remove 동작을 구현해봅시다.</p><p>/src/app/read/read.component.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; <span class="keyword">from</span> <span class="string">'../app.state'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-read'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./read.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./read.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  tutorials: Observable&lt;Tutorial[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private store: Store&lt;AppState&gt;</span><br><span class="line">  ) &#123; </span><br><span class="line">    <span class="keyword">this</span>.tutorials = <span class="keyword">this</span>.store.select(<span class="string">'tutorial'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 요 부분을 추가해주세요</span></span><br><span class="line">  delTutorial(index)&#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(<span class="keyword">new</span> TutorialActions.RemoveTutorial(index))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>/src/app/reducers/tutorial.reducer.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: Tutorial = &#123;</span><br><span class="line">  name: <span class="string">'Initial Tutorial'</span>,</span><br><span class="line">  url: <span class="string">'http://google.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">tutorialReducer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  state: Tutorial[] = [initialState], </span></span></span><br><span class="line"><span class="function"><span class="params">  action: TutorialActions.Actions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> TutorialActions.ADD_TUTORIAL:</span><br><span class="line">      <span class="keyword">return</span> [...state, action.payload];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove action을 사용합니다</span></span><br><span class="line">    <span class="keyword">case</span> TutorialActions.REMOVE_TUTORIAL:</span><br><span class="line">      state.splice(action.payload, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>splice를 사용해 리스트를 삭제하고 있습니다. http통신을 통한 list를 제어할 경우 화면상의 빠른 동작을 위해 리스트 전체를 다시 불러오는게 아니라 삭제된 부분만 클라이언트에서 삭제하는 경우가 많습니다. </p><p>다음번엔 @ngrx/effects 를 공부해보겠습니다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ngrx </tag>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH6 함수</title>
      <link href="/2019/01/02/learningJavascript-ch6/"/>
      <url>/2019/01/02/learningJavascript-ch6/</url>
      
        <content type="html"><![CDATA[<h2 id="6-1-반환-값"><a href="#6-1-반환-값" class="headerlink" title="6.1 반환 값"></a>6.1 반환 값</h2><p>함수 바디안에 return 키워드를 사용하면 함수를 즉시 종료하고 값을 반환합니다.</p><h2 id="6-2-호출과-참조"><a href="#6-2-호출과-참조" class="headerlink" title="6.2 호출과 참조"></a>6.2 호출과 참조</h2><p>자바스크립트에서는 함수도 객체입니다. 따라서 다른 객체와 마찬가지로 넘기거나 할당할 수 있습니다. 함수 식별자 뒤에 괄호를 쓰면 자바스크립트는 함수를 호출하려 한다고 이해하고, 함수 바디를 실행합니다. 그리고 함수를 호출한 표현식은 반환값이 됩니다. 괄호를 쓰지 않으면 다른 값과 마찬가지로 함수를 참조하는 것이며, 그 함수는 실행되지 않습니다.</p><p>함수를 호출하지 않고 다른 값과 마찬가지로 참조하기만 할 수 있다는 특징은 자바스크립트를 매우 유연한 언어로 만듭니다. 예를 들어 함수를 변수에 할당하면 다른 이름으로 함수를 호출할 수 있습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getGreeting(); <span class="comment">// "Hello, World!"</span></span><br><span class="line">getGreeting; <span class="comment">// function getGreeting()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = getGreeting;</span><br><span class="line">f(); <span class="comment">//"Hello, World!"</span></span><br></pre></td></tr></table></figure><p>함수를 객체 프로퍼티에 할당할 수도 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="number">0</span> = &#123;&#125;;</span><br><span class="line">o.f = getGreeting;</span><br><span class="line">o.f(); <span class="comment">// "Hello, World!"</span></span><br></pre></td></tr></table></figure><h2 id="6-3-함수와-매개변수"><a href="#6-3-함수와-매개변수" class="headerlink" title="6.3 함수와 매개변수"></a>6.3 함수와 매개변수</h2><p>함수를 호출하면서 정보를 전달할 때는 함수 매개변수를 이용합니다. 매개변수는 함수가 호출되기 전에는 존재하지 않는다는 점을 제외하면 일반적인 변수나 마찬가지입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (a*b)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 함수 선언에서 a와 b를 정해진 매개변수라고 합니다. 함수가 호출되면 정해진 매개변수는 값을 받아 실제 매개변수가 됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avg(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 7.5</span></span><br></pre></td></tr></table></figure><p>실제 매개변수는 변수와 매우 비슷하지만, 함수 바디 안에서만 존재합니다. 함수를 호출하면 함수 매개변수는 변수 자체가 아니라 그 값을 전달받습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`f 내부: x=<span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line">  x = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`f 내부: x=<span class="subst">$&#123;x&#125;</span> (할당 후)`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출하기 전: x=<span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line">f(x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출한 다음: x=<span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">  f를 호출하기 전: x=3</span></span><br><span class="line"><span class="comment">  f 내부: x=3</span></span><br><span class="line"><span class="comment">  f 내부: x=5 (할당 후)</span></span><br><span class="line"><span class="comment">  f를 호출한 다음: x=3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>여기서 중요한 것은 함수 안에서 x에 값을 할당하더라도 함수 바깥의 변수 x에는 아무 영향도 없다는 것입니다. 하지만 함수 안에서 객체 자체를 변경하면 그 객체는 함수 바깥에서도 바뀐 점이 반영됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.message = <span class="string">`f 안에서 수정함 (이전 값: '<span class="subst">$&#123;o.message&#125;</span>')`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  message: <span class="string">"초기 값"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출하기 전: o.message=<span class="subst">$&#123;o.message&#125;</span>`</span>);</span><br><span class="line">f(o);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출한 다음: o.message=<span class="subst">$&#123;o.message&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">  f를 호출하기 전: o.message="초기 값"</span></span><br><span class="line"><span class="comment">  f를 호출한 다음: o.message="f 안에서 수정함 (이전 값: '초기 값')"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>위 예제를 보면 함수 f 안에서 객체 o를 수정했고, 이렇게 바꾼 내용은 함수 바깥에서도 o에 그대로 반영되어 있음을 알 수 있습니다.</p><h3 id="6-3-1-매개변수가-함수를-결정하는가"><a href="#6-3-1-매개변수가-함수를-결정하는가" class="headerlink" title="6.3.1 매개변수가 함수를 결정하는가?"></a>6.3.1 매개변수가 함수를 결정하는가?</h3><p>여러 언어에서 함수의 시그니처에는 매개변수가 포함됩니다. 예를 들어 C언어에서 매개변수 없는 함수 f() 는 매개변수가 하나인 함수 f(x)와 다르고, f(x)는 매개변수가 두 개인 함수 f(x, y) 와 다릅니다. 자바스크립트에는 그런 차이가 없습니다. 함수 f가 있다면 호출할 때 매개변수를 한 개 전달하든 열 개 전달하든 같은 함수를 호출하는 겁니다.</p><h3 id="6-3-2-매개변수-해체"><a href="#6-3-2-매개변수-해체" class="headerlink" title="6.3.2 매개변수 해체"></a>6.3.2 매개변수 해체</h3><p>매개변수도 해체가 가능합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSentence</span>(<span class="params">&#123;subject, verb, object&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;subject&#125;</span> <span class="subst">$&#123;verb&#125;</span> <span class="subst">$&#123;object&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  subject: <span class="string">"I"</span>,</span><br><span class="line">  verb: <span class="string">"love"</span>,</span><br><span class="line">  object: <span class="string">"Javascript"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getSentence(o); <span class="comment">// "I love Javascript"</span></span><br></pre></td></tr></table></figure><p>해체 할당과 마찬가지로 프로퍼티 이름은 반드시 유효한 식별자여야 하고, 들어오는 객체에 해당 프로퍼티가 없는 변수는 undefined를 할당받습니다.</p><p>함수를 선언할 때 확산 연산자는 반드시 마지막 매개변수여야 합니다. 확산 연산자 뒤에 다른 매개변수가 있으면 자바스크립트는 전달된 값 중 어디까지를 확산 매개변수에 할당해야 하는지 판단할 수 없어서 에러를 일으킵니다.</p><h3 id="6-3-3-매개변수-기본값"><a href="#6-3-3-매개변수-기본값" class="headerlink" title="6.3.3 매개변수 기본값"></a>6.3.3 매개변수 기본값</h3><p>ES6에서는 매개변수에 기본값을 지정하는 기능도 추가됐습니다. 일반적으로 매개변수에 값을 제공하지 않으면 undefined가 값으로 할당됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b=<span class="string">"default"</span>, c=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;a&#125;</span> - <span class="subst">$&#123;b&#125;</span> - <span class="subst">$&#123;c&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>); <span class="comment">// 5 - 6 - 7</span></span><br><span class="line">f(<span class="number">5</span>,<span class="number">6</span>); <span class="comment">// 5 - 6 - 3</span></span><br><span class="line">f(<span class="number">5</span>); <span class="comment">// 5 - default - 3</span></span><br><span class="line">f(); <span class="comment">// undefined - default - 3</span></span><br></pre></td></tr></table></figure><h2 id="6-4-객체의-프로퍼티인-함수"><a href="#6-4-객체의-프로퍼티인-함수" class="headerlink" title="6.4 객체의 프로퍼티인 함수"></a>6.4 객체의 프로퍼티인 함수</h2><p>객체의 프로퍼티인 함수를 메서드라고 불러서 일반적인 함수와 구별합니다. 함수와 메서드 사이에는 다른 차이도 있는데 그건 나중에 다시 설명합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  name: <span class="string">"Wallace"</span>, <span class="comment">// 원시 값 프로퍼티</span></span><br><span class="line">  bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="string">"Woof!"</span>;&#125; <span class="comment">// 함수 프로퍼티(메서드)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6에서는 간편하게 메서드를 추가할 수 있는 문법이 새로 생겼습니다. 다음 예제는 이전 예제와 동일합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  name: <span class="string">'Wallace'</span>, <span class="comment">// 원시 값 프로퍼티</span></span><br><span class="line">  bark() &#123;<span class="keyword">return</span> <span class="string">"Woof!"</span>;&#125; <span class="comment">// 함수 프로퍼티(메서드)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 러닝자바스크립트 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic issue 01</title>
      <link href="/2019/01/01/ionic-issue-01/"/>
      <url>/2019/01/01/ionic-issue-01/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> mapHeightInit()&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.isPlaceSearch) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> contentEle:HTMLElement = <span class="keyword">await</span> <span class="keyword">this</span>.content.getScrollElement();</span><br><span class="line">  <span class="keyword">this</span>.mapFullSize = contentEle.clientHeight - <span class="number">100</span> + <span class="string">"px"</span>;</span><br><span class="line">  <span class="keyword">this</span>.mapDiv.nativeElement.style.height = <span class="keyword">this</span>.mapFullSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>화면에 전체높이를 알아야 가능한 작업이 있어서 Ionic의 Content를 가져와서 height 값을 계산해서 특정 Element의 높이를 정해줫다.</p><p>문제는 Angular Animation을 이용한 높이를 재조정 이후에 Height값을 다시 지정하는게 어려웠다. 높이를 재설정 해줫지만 적용되지 않았다.</p><h2 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h2><p>Angular Animation을 이용해서 높이값이 재조정 될 때 transition의 time이 300ms 였고, 모든 이벤트가 끝난 이후에 높이를 설정해줘야 했다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">HeightToggle</span>(<span class="params">to, name=<span class="string">"HeightToggle"</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> trigger(name,[</span><br><span class="line">state(<span class="string">'1'</span>, style(&#123;<span class="attr">height</span>: <span class="string">'*'</span>&#125;)),</span><br><span class="line">state(<span class="string">'0'</span>, style(&#123;<span class="attr">height</span>: <span class="string">'&#123;&#123; to &#125;&#125;'</span>&#125;), &#123;<span class="attr">params</span>: &#123;to&#125;&#125;),</span><br><span class="line">transition(<span class="string">'1 =&gt; 0'</span>, animate(<span class="string">'300ms ease-in'</span>)),</span><br><span class="line">transition(<span class="string">'0 =&gt; 1'</span>, animate(<span class="string">'300ms ease-out'</span>))</span><br><span class="line">]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>다행히 Angular에서는 Animation이 끝나는 이벤트가 존재했다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toggle"</span> [@<span class="attr">toggle</span>]=<span class="string">"show"</span> </span></span><br><span class="line"><span class="tag">  (@<span class="attr">toggle.start</span>)=<span class="string">"animationStarted($event)"</span></span></span><br><span class="line"><span class="tag">  (@<span class="attr">toggle.done</span>)=<span class="string">"animationDone($event)"</span></span></span><br><span class="line"><span class="tag">*<span class="attr">ngIf</span>=<span class="string">"show"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 문제해결 </tag>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH5 표현식과 연산자</title>
      <link href="/2018/12/23/learningJavscript-ch5/"/>
      <url>/2018/12/23/learningJavscript-ch5/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-연산자"><a href="#5-1-연산자" class="headerlink" title="5.1 연산자"></a>5.1 연산자</h2><p>연산자는 하나 이상의 피연산자가 있어야 결과를 낼 수 있습니다. 예를들어 1+2 라는 표현식에서<br>1, 2 는 피연산자이고 + 는 연산자입니다. 피연산자를 매개변수라 부르는 경우도 있습니다.</p><h2 id="5-2-산술-연산자"><a href="#5-2-산술-연산자" class="headerlink" title="5.2 산술 연산자"></a>5.2 산술 연산자</h2><table><thead><tr><th>연산자</th><th>설명</th><th>예제</th></tr></thead><tbody><tr><td>+</td><td>덧셈</td><td>3+2 // 5</td></tr><tr><td>-</td><td>뺄셈</td><td>3-2 // 1</td></tr><tr><td>/</td><td>나눗셈</td><td>3/2 // 1.5</td></tr><tr><td>*</td><td>곱셈</td><td>3*2 // 6</td></tr><tr><td>%</td><td>나머지</td><td>3%2 // 1</td></tr><tr><td>-</td><td>단항 부정</td><td>-x // x의 부호를 바꿈</td></tr><tr><td>+</td><td>단항 플러스</td><td>+x // x가 숫자가 아니면 숫자로 변환시도</td></tr><tr><td>++</td><td>전위 증가</td><td>++x</td></tr><tr><td>++</td><td>후위 증가</td><td>x++</td></tr><tr><td>–</td><td>전위 감소</td><td>–x</td></tr><tr><td>–</td><td>후위 감소</td><td>x–</td></tr></tbody></table><ul><li><p>자바스크립트의 숫자는 모두 Double 형식이므로 3/2 처럼 정수를 연산한 결과도 더블 형식입니다.</p></li><li><p>단항 부정과 단항 플러스의 경우는 변수에만 사용합니다. 숫자형 리터럴 앞에 붙으면 숫자 리터럴의 일부로 해석되어 연산자가 되지않습니다.</p></li><li><p>위, 후위 연산자의 차이도 이해해야 합니다. 전위 연산자는 연산이 이루어지기 전에 증/감이 이루어지며 후위 연산자는 연산 이후에 증/감이 이루어집니다.</p></li></ul><h2 id="5-3-연산자-우선순위"><a href="#5-3-연산자-우선순위" class="headerlink" title="5.3 연산자 우선순위"></a>5.3 연산자 우선순위</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84#%ED%91%9C" target="_blank" rel="noopener">https://developer.mozilla.org 참조</a></li><li>자바스크립트 연산자 우선순위중 가장 높은것이 괄호()입니다.</li><li>같은 우선순위에선 정의되어있는 순서(오른쪽 -&gt; 왼쪽, 왼쪽 -&gt; 오른쪽) 순서를 따릅니다.</li></ul><h2 id="5-4-비교-연산자"><a href="#5-4-비교-연산자" class="headerlink" title="5.4 비교 연산자"></a>5.4 비교 연산자</h2><p>비교 연산자는 이름처럼 두 개의 값을 비교합니다. 크게 일치함(===), 동등함(==), 대소관계 세 가지 타입으로 나뉩니다.</p><p>일치 관계는 같은 객체를 가리키거나, 같은 타입이고 값도 같다면 일치하다고 합니다. 일치관계의 경우 단순하고 이해하기 쉬우므로 버그나 오해를 낳는 경우가 거의 없습니다.</p><p>동등 관계는 두 값이 같은 객체를 가리키거나 같은 값을 갖도록 변환할 수 있다면 두 값을 동등하다고 봅니다. 두번째 성질 때문에 수많은 골칫거리와 혼란을 발생시켰는데 예로는 33 == “33” 같은 경우 입니다.</p><p>관계 연산자는 관계가 있는 값을 비교하며, 문자열이나 숫자처럼 원래 순서가 있는 데이터 타입에만 사용할 수 있습니다.</p><h2 id="5-5-숫자-비교"><a href="#5-5-숫자-비교" class="headerlink" title="5.5 숫자 비교"></a>5.5 숫자 비교</h2><p>숫자를 비교할 때는 염두해 두어야 할 것이 있습니다.</p><p>먼저 특별한 숫자형 값 NaN은 그 자신을 포함하여 무엇과도 같지 않습니다. 즉, NaN === NaN 과 NaN == NaN은 모두 false 입니다. 숫자가 NaN인지 알아보려면 내장된 isNaN 함수를 사용하십시오.</p><p>자바스크립트에서 숫자는 모두 Double형식입니다. 그리고 더블 형식은 근사치 이므로, 자바스크립트에서 숫자를 비교하다보면 예상치 못한 결과가 생길때가 있습니다.</p><p>자바스크립트에서 정수를 비교할 때, 그 정수가 안전한 범위라면 (Number.MIN_SAFE_INTEGER이상, Number.MAX_SAFE_INTEGER 이하) 안심하고 일치 연산자를 사용할 수 있습니다. 하지만 소수점이 있는 숫자를 비교할 때는 관계 연산자를 써서 테스트 하는 숫자가 대상 숫자에 “충분히 가까운지” 확인하는 편이 좋습니다. 자바스크립트에는 특별한 숫자형 상수 Number.EPSILON이 있습니다. 이것은 매우 작은값(약 2.22e-16)이며, 일반적으로 숫자 두 개를 구별하는 기준으로 사용합니다. 다음 예제를 보십시오.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  n += <span class="number">0.1</span>;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">0.3</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Stopped at <span class="subst">$&#123;n&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>이 코드를 실행하면 0.3에서 멈추지 않고 무한루프를 돌게됩니다. 이러한 현상이 생기는 이유는 0.1이 더블 형식으로 정확히 나타낼 수 없는 값이기 때문이기 때문입니다. 0.1은 이진 표현으로 나타낼 수 있는 숫자들 사이에 걸쳐 있습니다. 따라서 이 루프를 세 번째 반복할 때 n의 값은 0.30000000000000004 이므로 테스트는 false가 됩니다.</p><p>이때 Number.EPSILON과 관계 연산자를 사용해서 ‘느슨하게’ 비교하면 성공적으로 루프를 빠져나갈 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  n += <span class="number">0.1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(n - <span class="number">0.3</span>) &lt; <span class="built_in">Number</span>.EPSILON) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Stopped at <span class="subst">$&#123;n&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2 id="5-6-문자열-병합"><a href="#5-6-문자열-병합" class="headerlink" title="5.6 문자열 병합"></a>5.6 문자열 병합</h2><p>자바스크립트는 피연산자의 타입을 보고 덧셈을 할지 문자열 병합을 할지 판단합니다. 두 피연산자를 왼쪽에서 오른쪽으로 평가한 후, 피연산자 중 하나라도 문자열이면 문자열 병합을 수행합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">5</span> + <span class="string">"8"</span> <span class="comment">// 문자열 "88"이 됩니다.</span></span><br><span class="line"><span class="string">"3"</span> + <span class="number">5</span> + <span class="number">8</span> <span class="comment">// 문자열 "358"이 됩니다.</span></span><br></pre></td></tr></table></figure><h2 id="5-7-논리-연산자"><a href="#5-7-논리-연산자" class="headerlink" title="5.7 논리 연산자"></a>5.7 논리 연산자</h2><p>논리 연산자는 Boolean값만 다룰 수 있습니다. 대부분의 프로그래밍 언어에서 논리 연산자는 불리언 값에서만 동작하며 불리언 값만 반환합니다. 반면 자바스크립트의 논리 연산자는 불리언이 아닌 값도 다룰 수 있고, 놀랍게도 불리언이 아닌 값을 반환하기도 합니다.</p><p>연산자에 대해 설명하기 전에 자바스크립트가 불리언이 아닌 값을 불리언 값으로 바꾸는 방법에 익숙해져야 합니다.</p><h3 id="5-7-1-참-같은-값과-거짓-같은-값"><a href="#5-7-1-참-같은-값과-거짓-같은-값" class="headerlink" title="5.7.1 참 같은 값과 거짓 같은 값"></a>5.7.1 참 같은 값과 거짓 같은 값</h3><p>자바스크립트에서는 모든 데이터 타입을 참 같은 값과 거짓 같은 값으로 나눌 수 있습니다.</p><p>거짓 같은 값은 다음과 같습니다.</p><ul><li>undefined</li><li>null</li><li>false</li><li>0</li><li>NaN</li><li>‘’ (빈 문자열)</li></ul><p>이들 외에는 모두 참 같은 값입니다. 참 같은 값은 정말 많으므로 전부 나열할 수 없지만 몇 가지는 염두에 두어야 합니다.</p><ul><li>모든 객체 valueOf() 메서드를 호출했을 때 false를 반환하는 객체도 참 같은 값에 속합니다.</li><li>배열, 빈 배열도 참 같은 값에 속합니다.</li><li>공백만 있는 문자열 (“  “)등</li><li>문자열 “false”</li></ul><h2 id="5-8-AND-OR-NOT"><a href="#5-8-AND-OR-NOT" class="headerlink" title="5.8 AND, OR, NOT"></a>5.8 AND, OR, NOT</h2><p>자바스크립트가 지원하는 논리 연산자는 AND(&amp;&amp;), OR(||), NOT(!) 세 가지 입니다. </p><h3 id="5-8-1-단축-평가"><a href="#5-8-1-단축-평가" class="headerlink" title="5.8.1 단축 평가"></a>5.8.1 단축 평가</h3><p>AND연산의 경우 두 값을 모두 평가하지 않아도 될 때가 있습니다. x &amp;&amp; y 에서 x가 false 라면 y는 평가할 필요없이 연산의 결과는 false 입니다. 자바스크립트는 이런 방식으로 동작하며 이것을 단축 평가 라고 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> skipIt = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> result = skipIt || x++;</span><br></pre></td></tr></table></figure><p>위 연산에서 재밋는 점은 skipIt이 true 이므로 x++ 이 연산되지 않고 지나간다는 점 입니다.<br>x++ 연산을 동작 시키려면 skipIt이 false가 되면 됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doIt = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> result = doIt &amp;&amp; x++;</span><br></pre></td></tr></table></figure><p>여기에선 더 재미있는 현상이 일어납니다. doIt이 false 일 경우 x++연산이 스킵되지만 doIt이 true이면 x++연산이 일어납니다.<br>하지만 result에 저장되는 값은 true가 아닌 0이 들어가게 됩니다.<br>이렇게 동작하는 이유를 알기위해선 피연산자가 불리언이 아닐 때 논리연산자가 동작하는 방법을 알아야 합니다.</p><h3 id="5-8-2-피연산자가-불리언이-아닐-때-논리-연산자가-동작하는-방법"><a href="#5-8-2-피연산자가-불리언이-아닐-때-논리-연산자가-동작하는-방법" class="headerlink" title="5.8.2 피연산자가 불리언이 아닐 때 논리 연산자가 동작하는 방법"></a>5.8.2 피연산자가 불리언이 아닐 때 논리 연산자가 동작하는 방법</h3><p>불리언 피연산자를 사용하면 논리 연산자는 항상 불리언을 반환합니다. 피연산자가 불리언이 아니면, 결과물을 결정한 값이 반환됩니다.</p><table><thead><tr><th>x</th><th>y</th><th>x &amp;&amp; y</th></tr></thead><tbody><tr><td>거짓 같은 값</td><td>거짓 같은 값</td><td>x(거짓 같은 값)</td></tr><tr><td>거짓 같은 값</td><td>참 같은 값</td><td>x(거짓 같은 값)</td></tr><tr><td>참 같은 값</td><td>거짓 같은 값</td><td>y(거짓 같은 값)</td></tr><tr><td>참 같은 값</td><td>참 같은 값</td><td>y(참 같은 값)</td></tr></tbody></table><table><thead><tr><th>x</th><th>y</th><th>x or y</th></tr></thead><tbody><tr><td>거짓 같은 값</td><td>거짓 같은 값</td><td>y(거짓 같은 값)</td></tr><tr><td>거짓 같은 값</td><td>참 같은 값</td><td>y(참 같은 값)</td></tr><tr><td>참 같은 값</td><td>거짓 같은 값</td><td>x(참 같은 값)</td></tr><tr><td>참 같은 값</td><td>참 같은 값</td><td>x(참 같은 값)</td></tr></tbody></table><p>이런 자바스크립트의 특징을 이용한 몇가지 코딩 트릭이 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = suppliedOptions || &#123;<span class="attr">name</span>: <span class="string">"Default"</span>&#125;</span><br></pre></td></tr></table></figure><p>객체는 빈 값이어도 항상 참 같은 값으로 평가됩니다. 따라서 suppliedOptions가 객체이면 options는 suppliedOptions를 가리키게 됩니다. 옵션이 제공되지 않으면, 즉 suppliedOptions가 null이나 undefiend라면 options는 기본값을 갖게 됩니다.</p><h3 id="5-8-3-조건-연산자"><a href="#5-8-3-조건-연산자" class="headerlink" title="5.8.3 조건 연산자"></a>5.8.3 조건 연산자</h3><p>조건 연산자는 자바스크립트의 유일한 3항 연산자 입니다. 조건 연산자는 if…else 문과 동일한 표현식 입니다. 다음 예제를 보십시오</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doIt = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> result = doIt ? <span class="string">"Did it!"</span> : <span class="string">"Didn't do it."</span>;</span><br></pre></td></tr></table></figure><p>3항 연산자를 if…else 문을 혼란스럽게 바꿔 놓은것이 아니냐는 식으로 생각할 수 있지만, 3항 연산자는 문이 아니라 표현식이므로 다른 표현식과 결합하여 매우 유용하게 사용할 수 있습니다.</p><h3 id="5-8-4-쉼표-연산자"><a href="#5-8-4-쉼표-연산자" class="headerlink" title="5.8.4 쉼표 연산자"></a>5.8.4 쉼표 연산자</h3><p>쉼표 연산자는 표현식을 결합하여 두 표현식을 평가한 후, 두 번째 표현식의 결과를 반환합니다.<br>표현식을 하나 이상 실행해야 하지만 값으로 필요한 것은 마지막 표현식의 결과뿐일 때 쉼표 연산자를 유용하게 쓸 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">10</span>, z;</span><br><span class="line">z = (x++, y++);</span><br></pre></td></tr></table></figure><p>이 예제에서 x,y 의 값은 1씩 증가하지만 z의 값은 10, 즉 y++가 반환하는 값입니다. 쉼표 연산자는 우선순위가 가장 낮은 연산자 이므로 괄호를 사용했습니다. 쉼표 연산자는 for 문에서 표현식을 결합할 때 사용하거나, 함수에서 빠져나오기 전에 여러 가지 작업을 한데 묶을 때 사용합니다.</p><h2 id="5-9-연산자-그룹"><a href="#5-9-연산자-그룹" class="headerlink" title="5.9 연산자 그룹"></a>5.9 연산자 그룹</h2><p>그룹 연산자(괄호)에는 아무 효과도 없지만 연산자 우선순위를 높이거나 명확히 표현하는데 쓸 수 있습니다. 따라서 그룹 연산자는 연산 순서만 바꿀 뿐, 다른 부작용은 전혀 없는 안전한 연산자 입니다.</p><h3 id="5-9-1-비트-연산자"><a href="#5-9-1-비트-연산자" class="headerlink" title="5.9.1 비트 연산자"></a>5.9.1 비트 연산자</h3><p>비트 연산자는 피연산자를 2의 보수 형식으로 저장된 32비트 부호 붙은 정수로 간주합니다. 자바스크립트의 숫자는 모두 더블 형식이므로 자바스크립트는 비트 연산자를 실행하기 전에 숫자를 먼저 32비트 정수로 변환하고, 결과를 반환할 때 다시 더블 형식으로 변환합니다.</p><p>(마크다운 문법때문에 | 를 (or) 로 표기함)</p><table><thead><tr><th>연산자</th><th>설명</th><th>예제</th></tr></thead><tbody><tr><td>&amp;</td><td>비트 AND</td><td>0b1010 &amp; 0b1100 // 결과: 0b1000</td></tr><tr><td>(or)</td><td>비트 OR</td><td>0b1010 (or) 0b1100 // 결과: 0b1110</td></tr><tr><td>^</td><td>비트 XOR</td><td>0b1010 ^ 0b1100 // 결과: 0b0110</td></tr><tr><td>~</td><td>비트 NOT</td><td>-0b1010 // 결과: 0b0101</td></tr><tr><td>&lt;&lt;</td><td>왼쪽 시프트</td><td></td></tr><tr><td>&gt;&gt;</td><td>부호가 따라가는 오른쪽 시프트</td><td></td></tr><tr><td>&gt;&gt;&gt;</td><td>0으로 채우는 오른쪽 시프트</td></tr></tbody></table><p>왼쪽 시프트는 2를 곱하는 효과가 있고, 오른쪽 시프트는 2로 나눈 다음 소수점 아래를 버리는 효과가 있습니다.<br>하드웨어 조작을 제외하고 비트 연산자를 쓰는 것이 효율적인 경우는 플래그(불리언 값)을 다룰때 입니다.</p><p>유닉스에서는 파일에 읽기, 쓰기, 실행 권한을 각각 지정할 수 있습니다. 사용자 마다 이들 권한이 각각 주어질 수 있으므로 플래그를 사용하는 것이 어울립니다. 플래그가 세 개 있으므로 이 정보를 저장하는 데는 비트 세 개가 필요합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FLAG_EXECUTE = <span class="number">1</span> <span class="comment">// 0b001</span></span><br><span class="line"><span class="keyword">const</span> FLAG_WRITE = <span class="number">2</span> <span class="comment">// 0b010</span></span><br><span class="line"><span class="keyword">const</span> FLAG_READ = <span class="number">4</span> <span class="comment">// 0b100</span></span><br></pre></td></tr></table></figure><h3 id="5-9-2-typeof-연산자"><a href="#5-9-2-typeof-연산자" class="headerlink" title="5.9.2 typeof 연산자"></a>5.9.2 typeof 연산자</h3><p>typeof 연산자는 피연산자의 타입을 나타내는 문자열을 반환합니다. 하지만 이 연산자는 자바스크립트의 일곱가지 데이터 타입을 정확하게 나타내지 못하며 끝없는 혼란을 초래했고 계속 비판받았습니다.</p><p>다음은 typeof가 반환할 수 있는 값입니다.</p><table><thead><tr><th>표현식</th><th>반환값</th><th>참고</th></tr></thead><tbody><tr><td>typeof undefined</td><td>“undefined”</td><td></td></tr><tr><td>typeof null</td><td>“object”</td><td>애석하지만 사실입니다.</td></tr><tr><td>typeof {}</td><td>“object”</td><td></td></tr><tr><td>typeof true</td><td>“boolean”</td><td></td></tr><tr><td>typeof 1</td><td>“number”</td><td></td></tr><tr><td>typeof “”</td><td>“string”</td><td></td></tr><tr><td>typeof Symbol()</td><td>“symbol”</td><td>ES6에서 새로 생겼습니다.</td></tr><tr><td>typeof function(){}</td><td>“function”</td></tr></tbody></table><h3 id="5-9-3-void-연산자"><a href="#5-9-3-void-연산자" class="headerlink" title="5.9.3 void 연산자"></a>5.9.3 void 연산자</h3><p>void 연산자는 undefined를 반환합니다. 잘 쓰이진 않지만 다음과 같은 방법으로도 사용 가능합니다</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void 0"</span>&gt;</span>Do nothing.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-9-4-할당-연산자"><a href="#5-9-4-할당-연산자" class="headerlink" title="5.9.4 할당 연산자"></a>5.9.4 할당 연산자</h3><p>할당 연산자는 변수에 값을 할당해야 합니다. 그렇기 때문에 표현식의 좌변에 있는 것은 반드시 값을 저장할 수 있는 것이어야 합니다.</p><h2 id="5-10-해체-할당"><a href="#5-10-해체-할당" class="headerlink" title="5.10 해체 할당"></a>5.10 해체 할당</h2><p>ES6에서 새로 도입한 해체 할당은 매우 환영 받는 기능입니다. 이 기능은 객체나 배열을 변수로 ‘해체’할 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 선언</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 해체 할당</span></span><br><span class="line"><span class="keyword">const</span> &#123;a, b, c&#125; = obj;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// undefind</span></span><br><span class="line">b; <span class="comment">// 2</span></span><br><span class="line">c; <span class="comment">// 3</span></span><br><span class="line">d; <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>객체를 해체할 때는 반드시 변수 이름과 객체의 프로퍼티 이름이 일치해야 합니다. 프로퍼티 이름이 유효한 식별자인 프로퍼티만 해체 후 할당됩니다.</p><p>이 예제에서는 선언과 할당을 같은 문에서 실행했습니다. 객체 해체는 할당만으로 이뤄질 수도 있지만, 그렇게 하려면 반드시 괄호를 써야합니다. 괄호를 쓰지 않으면 자바스크립트는 표현식 좌변을 블록으로 해석합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 에러가 납니다.</span></span><br><span class="line">&#123;a, b, c&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동작합니다.</span></span><br><span class="line">(&#123;a, b, c&#125; = obj);</span><br></pre></td></tr></table></figure><p>배열을 해체할 때는 배열 요소에 대응할 변수 이름을 마음대로 쓸 수 있으며 이들은 배열 순서대로 대응합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 배열 선언</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 해체 할당</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = arr;</span><br><span class="line">x; <span class="comment">// 1,</span></span><br><span class="line">y; <span class="comment">// 2,</span></span><br><span class="line">z; <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>확산 연산자(…)를 사용하면 남은 요소를 새 배열에 할당할 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...rest] = arr;</span><br><span class="line"></span><br><span class="line">x; <span class="comment">// 1</span></span><br><span class="line">y; <span class="comment">// 2</span></span><br><span class="line">rest; <span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><p>배열 해체를 활용한 변수 값 교환도 유용하게 쓸 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">[a,b] = [b,a];</span><br><span class="line">a; <span class="comment">// 10</span></span><br><span class="line">b; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="5-11-객체와-배열-연산자"><a href="#5-11-객체와-배열-연산자" class="headerlink" title="5.11 객체와 배열 연산자"></a>5.11 객체와 배열 연산자</h2><p>객체와 배열, 함수에는 특별한 연산자가 있습니다. 이러한 연산자는 해당 챕터에서 자세히 설명되어 있습니다.</p><h2 id="5-12-템플릿-문자열과-표현식"><a href="#5-12-템플릿-문자열과-표현식" class="headerlink" title="5.12 템플릿 문자열과 표현식"></a>5.12 템플릿 문자열과 표현식</h2><p>템플린 문자열은 어떤 표현식이든 그 값을 문자열에 넣을 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> roomTempC = <span class="number">21.5</span>;</span><br><span class="line"><span class="keyword">let</span> currentTempC = <span class="number">19.5</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`The current temperature is `</span> +</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;currentTempC - roomTempC&#125;</span>\u00b0 different than room temperature.`</span>;</span><br><span class="line"><span class="keyword">const</span> fahrenheit = </span><br><span class="line">  <span class="string">`The current temperature is <span class="subst">$&#123;currentTempC * <span class="number">9</span><span class="regexp">/5 + 32&#125;\u00b0F`;</span></span></span></span><br></pre></td></tr></table></figure><h2 id="5-13-표현식과-흐름-제어-패턴"><a href="#5-13-표현식과-흐름-제어-패턴" class="headerlink" title="5.13 표현식과 흐름 제어 패턴"></a>5.13 표현식과 흐름 제어 패턴</h2><h3 id="5-13-1-if…else-문을-3항-연산자로-바꾸기-생략"><a href="#5-13-1-if…else-문을-3항-연산자로-바꾸기-생략" class="headerlink" title="5.13.1 if…else 문을 3항 연산자로 바꾸기(생략)"></a>5.13.1 if…else 문을 3항 연산자로 바꾸기(생략)</h3><h3 id="5-13-2-if-문을-단축-평가하는-OR-표현식으로-바꾸기"><a href="#5-13-2-if-문을-단축-평가하는-OR-표현식으로-바꾸기" class="headerlink" title="5.13.2 if 문을 단축 평가하는 OR 표현식으로 바꾸기"></a>5.13.2 if 문을 단축 평가하는 OR 표현식으로 바꾸기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!options) options = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이처럼 바꿀 수 있습니다.</span></span><br><span class="line">options = options || &#123;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 러닝자바스크립트 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tags and Categories</title>
      <link href="/2018/12/22/Tags-and-Categories/"/>
      <url>/2018/12/22/Tags-and-Categories/</url>
      
        <content type="html"><![CDATA[<p>This post contains 2 tags and 1 category.</p>]]></content>
      
      
      <categories>
          
          <category> Baz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foo </tag>
            
            <tag> Bar </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
