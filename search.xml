<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo cactus 사용방법</title>
      <link href="/2019/03/12/cactus-readme/"/>
      <url>/2019/03/12/cactus-readme/</url>
      
        <content type="html"><![CDATA[<h1 id="Cactus"><a href="#Cactus" class="headerlink" title="Cactus"></a>Cactus</h1><p>A responsive, clean and simple <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> theme for a personal website.</p><p>:cactus: <a href="https://probberechts.github.io/hexo-theme-cactus/" target="_blank" rel="noopener">Demo</a></p><p><img src="https://docs.google.com/uc?id=1K66bccwr4z9TgJev0AzCqbI7BxzVr7md" alt="screenshot"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul><li><a href="#general">General</a></li><li><a href="#features">Features</a></li><li><a href="#install">Install</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#license">License</a></li></ul><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><ul><li><strong>Version</strong> : 3.0</li><li><strong>Compatibility</strong> : Hexo 3 or later</li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>Fully responsive</li><li>Multiple color schemes</li><li>Pick your own code highlighting scheme</li><li>Configurable navigation menu</li><li>Support for local search</li><li>Projects list</li><li>I18n support</li><li>Disqus integration</li><li>Google analytics / Baidu Tongji</li><li>Font Awesome icons</li><li>Simplicity</li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ol><li><p>In the <code>root</code> directory:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus</span><br></pre></td></tr></table></figure></li><li><p>Change the <code>theme</code> property in the <code>config.yml</code> file.</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">cactus</span></span><br></pre></td></tr></table></figure><p> See below for more information on how to customize this theme.</p></li><li><p>Create pages and articles with the <code>hexo new [layout] &lt;title&gt;</code> command.<br> For example, to create an “about me” page, run:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p> This will create a new file in <code>source/about/index.md</code><br> Similary, you can create a new article with</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><p> and add some interesting content in <code>source/_posts/hello-world.md</code>.</p></li><li><p>Run: <code>hexo generate</code> and <code>hexo server</code></p></li><li><p><a href="https://hexo.io/docs/deployment" target="_blank" rel="noopener">Publish your blog</a>!</p></li></ol><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>You can (and should) modify a couple of settings. An overview of all settings<br>can be found in  <a href="_config.yml">_config.yml</a>. The most important ones are<br>discussed below.</p><p>There are two possible methods to override the defaults. As a first option,<br>you could fork the theme and maintain a custom branch with your settings.<br>Alternatively, you can configure it from your site’s primary configuration<br>file. Therefore, define your custom settings under the <code>theme_config</code> variable.<br>For example:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line"><span class="attr">  colorscheme:</span> <span class="string">white</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># themes/cactus/_config.yml</span></span><br><span class="line"><span class="attr">colorscheme:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>This will override the default black colorscheme in <code>themes/cactus/_config.yml</code>.</p><h3 id="Color-scheme"><a href="#Color-scheme" class="headerlink" title="Color scheme"></a>Color scheme</h3><p>Currently, this theme is delivered with four color schemes: <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/" target="_blank" rel="noopener">dark</a>, <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-light/public/" target="_blank" rel="noopener">light</a>,<br><a href="https://probberechts.github.io/hexo-theme-cactus/cactus-white/public/" target="_blank" rel="noopener">white</a> and <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-classic/public/" target="_blank" rel="noopener">classic</a>. Set your preferred color scheme in the <code>_config.yml</code> file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">colorscheme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><p>Alternatively, you can easily create your own color scheme by creating a new<br>file in <code>source/css/_colors</code>.</p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><p>Setup the navigation menu in the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">  Home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  About:</span> <span class="string">/about/</span></span><br><span class="line"><span class="attr">  Writing:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">  Projects:</span> <span class="attr">http://github.com/probberechts</span></span><br><span class="line"><span class="attr">  LINK_NAME:</span> <span class="string">URL</span></span><br></pre></td></tr></table></figure><h3 id="Blog-posts-list-on-home-page"><a href="#Blog-posts-list-on-home-page" class="headerlink" title="Blog posts list on home page"></a>Blog posts list on home page</h3><p>You have two options for the list of blog posts on the home page:</p><ul><li><p>Show only the 5 most recent posts (default)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">posts_overview:</span></span><br><span class="line"><span class="attr">  show_all_posts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  post_count:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>Show all posts</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">posts_overview:</span></span><br><span class="line"><span class="attr">  show_all_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Projects-list"><a href="#Projects-list" class="headerlink" title="Projects list"></a>Projects list</h3><p>Create a projects file <code>source/_data/projects.json</code> to show a list of your projects on the index page.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Hexo"</span>,</span><br><span class="line">       <span class="attr">"url"</span>:<span class="string">"https://hexo.io/"</span>,</span><br><span class="line">       <span class="attr">"desc"</span>:<span class="string">"A fast, simple &amp; powerful blog framework"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Font Awesome"</span>,</span><br><span class="line">       <span class="attr">"url"</span>:<span class="string">"http://fontawesome.io/"</span>,</span><br><span class="line">       <span class="attr">"desc"</span>:<span class="string">"The iconic font and CSS toolkit"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Social-media-links"><a href="#Social-media-links" class="headerlink" title="Social media links"></a>Social media links</h3><p>Cactus can automatically add links to your social media accounts.<br>Therefore, update the theme’s <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social_links:</span></span><br><span class="line"><span class="attr">  github:</span> <span class="string">your-github-url</span></span><br><span class="line"><span class="attr">  twitter:</span> <span class="string">your-twitter-url</span></span><br><span class="line"><span class="attr">  NAME:</span> <span class="string">your-NAME-url</span></span><br></pre></td></tr></table></figure><p>where <code>NAME</code> is the name of a <a href="https://fontawesome.com/icons?d=gallery&amp;s=brands" target="_blank" rel="noopener">Font Awesome icon</a>.</p><h3 id="Language-configuration"><a href="#Language-configuration" class="headerlink" title="Language configuration"></a>Language configuration</h3><p>If you are new to Hexo and internationalization (i18n), please read<br><a href="https://hexo.io/docs/internationalization.html" target="_blank" rel="noopener">Hexo documentation - internationalization (i18n) section</a></p><p>Currently, the theme is delivered with support for:</p><ul><li>English (en), default</li><li>Brazilian Portuguese (pt-br)</li><li>Catalan (ca)</li><li>Chinese (Simplified, PRC) (zh-CN)</li><li>Dutch (nl)</li><li>French (fr)</li><li>Italian (it)</li><li>Persian (fa)</li><li>Russian (ru)</li><li>Spanish (es)</li></ul><p>If you would like to use one the languages listed above, simply set <code>language</code><br>to the desired language (e.g., <code>fr</code>) in <code>_config.yml</code>.<br>Otherwise, you can follow the steps below (E.g., to add a Japanese (ja) translation):</p><ol><li>Set <code>language</code> to <code>ja</code> in Hexo configuration file <code>_config.yml</code></li><li>Create a <code>ja.yml</code> file in the <code>themes/cactus/languages/</code> folder</li><li>Copy the content of <code>themes/cactus/languages/default.yml</code> and paste it it into the <code>ja.yml</code> file</li><li>Replace all English strings by their Japanese translation</li></ol><p><strong>Note: Cactus does not support multi-language sites.</strong></p><h3 id="RTL-support"><a href="#RTL-support" class="headerlink" title="RTL support"></a>RTL support</h3><p>This theme support RTL languages for Persian and Arabic language.<br>If you would like to use RTL layout, change <code>direction</code> attribute in <code>_config.yml</code> to <code>rtl</code>.<br>Note that this also will change the font to <a href="https://github.com/rastikerdar/vazir-font" target="_blank" rel="noopener">Vazir</a>, wich is a Persian font.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">direction: rtl</span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>Set the <code>rss</code> field in the <code>_config.yml</code> to one of the following values:</p><ol><li><code>rss: false</code> will totally disable rss (default).</li><li><code>rss: atom.xml</code> sets a specific feed link.</li><li><code>rss:</code>leave empty to use the <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> plugin.</li></ol><h3 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h3><p>Add you Google Analytics or Baidu Tongji <code>tracking_id</code> to the <code>_config.yml</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">'UA-49627206-1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidu_analytics:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="number">2e6</span><span class="string">da3c375c8a87f5b664cea6d4cb29c</span></span><br></pre></td></tr></table></figure><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>First, create a site on Disqus: <a href="http://disqus.com/admin/create/" target="_blank" rel="noopener">https://disqus.com/admin/create/</a>.</p><p>Next, update the <code>_config.yml</code> file:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">SITENAME</span></span><br></pre></td></tr></table></figure><p>where <code>SITENAME</code> is the name you gave your site on Disqus.</p><h3 id="Code-Highlighting"><a href="#Code-Highlighting" class="headerlink" title="Code Highlighting"></a>Code Highlighting</h3><p>Pick one of <a href="https://github.com/probberechts/hexo-theme-cactus/tree/master/source/css/_highlight" target="_blank" rel="noopener">the available colorschemes</a> and add it to the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span> <span class="string">COLORSCHEME_NAME</span></span><br></pre></td></tr></table></figure><h3 id="Tags-and-categories"><a href="#Tags-and-categories" class="headerlink" title="Tags and categories"></a>Tags and categories</h3><p>Tags and categories can be included in the front-matter of your posts. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: Tags and Categories</span><br><span class="line">date: 2017-12-24 23:29:53</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>Foo</span><br><span class="line"><span class="bullet">- </span>Bar</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">- </span>Baz</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">This post contains 2 tags and 1 category.</span><br></pre></td></tr></table></figure><p>You can create a page with a tag cloud by running:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>Next, add <code>type: tags</code> to the front-matter of <code>source/tags/index.md</code>. You can also<br>add a tag cloud to the home page by setting the <code>tags_overview</code> option to <code>true</code>.</p><p>Similarly, you can create a page with an overview of all categories by running:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>and adding <code>type: categories</code> to the front-matter of <code>source/categories/index.md</code>. </p><h3 id="Local-search"><a href="#Local-search" class="headerlink" title="Local search"></a>Local search</h3><p>First, install the <a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">hexo-generate-search</a><br>plugin, which will generate a search index file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>Next, create a page to display the search engine:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page search</span><br></pre></td></tr></table></figure><p>and put <code>type: search</code> in the front-matter.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Search</span><br><span class="line">type: search</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>Finally, edit the <code>_config.yml</code> and add a link to the navigation menu.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">  search:</span> <span class="string">/Search/</span></span><br></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ionic issue 02</title>
      <link href="/2019/01/15/ionic-issue-02/"/>
      <url>/2019/01/15/ionic-issue-02/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><p>ionic3 에서 ngrx를 사용하려 했으나 에러와 함께 작동되지 않았다.</p><p>같은 예제를 Angular에서 돌려봣을때 문제가 없었다.</p><h2 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h2><p>ionic3버젼에서 Angular5를 사용하고 있었고 @ngrx/store를 그냥 깔면 7버젼이 깔려 서로 호환이 안된다는걸 알게되었다.</p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>@ngrx/store@5 라는 명령어를 이용해서 5버젼을 깔면 ionic3에서도 ngrx/store를 사용할 수 있다. 아무래도 Angular 와 ngrx 의 버젼이 같아야 호환이 되는듯하다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 문제해결 </tag>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ngrx 튜토리얼 - Store</title>
      <link href="/2019/01/10/ngrx-tutorial-01/"/>
      <url>/2019/01/10/ngrx-tutorial-01/</url>
      
        <content type="html"><![CDATA[<h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><p>해당 사이트의 설명을 대부분 참조했고 제 나름대로의 설명을 추가했습니다.<br><a href="https://coursetro.com/posts/code/151/Angular-Ngrx-Store-Tutorial---Learn-Angular-State-Management" target="_blank" rel="noopener">https://coursetro.com</a></p><h2 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h2><p>angular-cli를 이용해서 프로젝트를 생성합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng new ngrx-tut</span><br><span class="line"><span class="built_in">cd</span> ngrx-tut</span><br></pre></td></tr></table></figure><p>프로젝트에 ngrx/store 를 설치합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @ngrx/store --save</span><br></pre></td></tr></table></figure></p><p>작업을 위해 프로젝트를 띄워봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure><p>별 다른 작업을 하지않았다면 다음 링크로 프로젝트를 볼 수 있습니다.<br><a href="http://localhost:4200" target="_blank" rel="noopener">http://localhost:4200</a></p><h2 id="Model-생성"><a href="#Model-생성" class="headerlink" title="Model 생성"></a>Model 생성</h2><p>다음 경로에 파일을 생성하고 모델을 정의해봅시다.<br>/src/app/models/tutorial.model.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface Tutorial &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  url: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Action-생성"><a href="#Action-생성" class="headerlink" title="Action 생성"></a>Action 생성</h2><p>ngrx에서 사용되는 Action은 두가지 요소를 가지고 있습니다.</p><ol><li>type: 보통 Action의 이름을 정의합니다. </li><li>payload: Action에 필요한 parameters를 저장할 수 있는 객체입니다.</li></ol><p>Action는 마치 Event의 이름들을 정의해놓은 느낌이 있습니다. 여기서 정의한 Action을 Reducer에서 사용하며 Action.type을 통해 각각의 동작을 정의해주게 됩니다.</p><p>다음 경로에 Action을 생성해봅시다.<br>/src/app/actions/tutorial.actions.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TUTORIAL = <span class="string">'[TUTORIAL] Add'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REMOVE_TUTORIAL = <span class="string">'[TUTORIAL] Remove'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTutorial</span> <span class="title">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">  readonly type = ADD_TUTORIAL</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public payload: Tutorial) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">REmoveTutorial</span> <span class="title">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">  readonly type = REMOVE_TUTORIAL</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public payload: number) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Actions = AddTutorial | RemoveTutorial</span><br></pre></td></tr></table></figure></p><h2 id="Reducer-생성"><a href="#Reducer-생성" class="headerlink" title="Reducer 생성"></a>Reducer 생성</h2><p>앞서 말했던것처럼 Reducer는 입력된 Action의 type을 통해 해야 할 동작을 명시해줍니다. MVC의 Controller 느낌이랑 비슷합니다.</p><p>다음 경로에 Reducer를 생성해봅시다.<br>/src/app/reducers/tutorial.reducer.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Section 1</span></span><br><span class="line"><span class="keyword">const</span> initialState: Tutorial = &#123;</span><br><span class="line">  name: <span class="string">'Initial Tutorial'</span>,</span><br><span class="line">  url: <span class="string">'http://google.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">tutorialReducer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  state: Tutorial[] = [initialState], </span></span></span><br><span class="line"><span class="function"><span class="params">  action: TutorialActions.Actions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Section 2</span></span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> TutorialActions.ADD_TUTORIAL:</span><br><span class="line">      <span class="keyword">return</span> [...state, action.payload];</span><br><span class="line">    <span class="keyword">case</span> TutorialActions.REMOVE_TUTORIAL:</span><br><span class="line">      state.splice(action.payload, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>Section 1<br>초기값으로 사용하기 위한 데이터를 만들어줍니다. 실제로는 데이터가 없을때의 Model을 정의해놓는등 다양하게 활용할 수 있습니다.</p></li><li><p>Section 2<br>switch 문에 action.type을 이용해서 동작 방식을 결정합니다. 여기선 case 안에 로직을 넣어놧지만 상황에 따라 로직을 분리해서 사용하는것도 좋습니다.</p></li></ul><h2 id="App-State-생성"><a href="#App-State-생성" class="headerlink" title="App State 생성"></a>App State 생성</h2><p>State 는 ‘상태’ 라는 말로 번역하기는 좀 이해하기 어려운듯 합니다. 기존의 ‘변수’라는 말과 상당히 유사하게 사용됩니다. component 기반 개발을 하다보면 각각 다른 위치에 있는 component가 같은 데이터를 공유하는 상황이 종종 생기는데, 이를 컴포넌트 자체에서 처리하는건 굉장히 복잡합니다. </p><p>그래서 SingleTon 패턴 형식으로 데이터를 다루게 되는데 여기서 사용되는 App State도 그러한 종류 중 하나로 보면 될듯합니다.</p><p>다음 경로에 app.state.ts를 만들어 봅시다.<br>/src/app/app.state.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'./models/tutorial.model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface AppState &#123;</span><br><span class="line">  readonly tutorial: Tutorial[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="app-module-ts-변경"><a href="#app-module-ts-변경" class="headerlink" title="app.module.ts 변경"></a>app.module.ts 변경</h2><p>이제 지금까지 만든 store를 등록하는 과정입니다.<br>app.module.ts의 import 에 StoreModule을 추가해 봅시다.<br>/src/app/app.module/ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'./app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StoreModule &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tutorialReducer &#125; <span class="keyword">from</span> <span class="string">'./reducers/tutorial.reducer'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    StoreModule.forRoot(&#123;</span><br><span class="line">      tutorial: tutorialReducer</span><br><span class="line">    &#125;),</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Component-생성"><a href="#Component-생성" class="headerlink" title="Component 생성"></a>Component 생성</h2><p>tutorial reducer를 동작할 component를 만들어봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng g c <span class="built_in">read</span></span><br><span class="line">ng g c create</span><br></pre></td></tr></table></figure><h2 id="Read-Component"><a href="#Read-Component" class="headerlink" title="Read Component"></a>Read Component</h2><p>해당 경로에 read 컴포넌트를 다음과 같이 작성해줍니다.<br>/src/app/read/read.component.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; <span class="keyword">from</span> <span class="string">'../app.state'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-read'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./read.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./read.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Section 1</span></span><br><span class="line">  tutorials: Observable&lt;Tutorial[]&gt;;</span><br><span class="line">  <span class="comment">// Section 2</span></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private store: Store&lt;AppState&gt;</span><br><span class="line">  ) &#123; </span><br><span class="line">    <span class="keyword">this</span>.tutorials = <span class="keyword">this</span>.store.select(<span class="string">'tutorial'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Section 1<br>tutorials라는 Observable을 정의했습니다. 차후에 HTML에서 사용될 변수입니다.</p></li><li><p>Section 2<br>store.select를 통해 tutorial을 불러왔습니다. app.module.ts의 StoreModule.forRoot({}) 에 정의해둔 reducer를 불러오는 동작을 합니다.</p></li></ul><p>이제 HTML을 작성해봅시다.<br>/src/app/read/read.component.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> *<span class="attr">ngIf</span>=<span class="string">"tutorials"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Tutorials<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let tutorial of tutorials | async"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">"tutorial.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; tutorial.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>HTML과 Angular 문법이기 때문에 딱히…. 여기서 설명드리지 않겟습니다.<br>그래도 조금 설명 하자면 *ngFor 는 javascript의 for…of 반복문을 생각하시면 됩니다.<br>async는 tutorials가 Observable이기 때문에 AsyncPipe를 사용해서 자동으로 subscribe 해줍니다.</p><p>이제 app.component에서 read.component 를 사용해봅시다.<br> /src/app/app.component.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-create</span>&gt;</span><span class="tag">&lt;/<span class="name">app-create</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-read</span>&gt;</span><span class="tag">&lt;/<span class="name">app-read</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css도 조금 추가해주겟습니다.</p><p>/src/styles.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Arial'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(50% - 6em);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>여기까지가 등록된 리스트를 보는 방법입니다.</p><h2 id="Create-Component"><a href="#Create-Component" class="headerlink" title="Create Component"></a>Create Component</h2><p>ngrx의 동작은 action -&gt; dispatch -&gt; reducer -&gt; state 변경 이런 순 입니다.<br>이런 동작을 잘 알아보기 위해 Create 동작을 해보겟습니다.</p><p>다음과 같이 Create component 를 작성해봅시다<br>/src/app/create/create.component.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; <span class="keyword">from</span> <span class="string">'../app.state'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">"../actions/tutorial.actions"</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-create'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./create.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./create.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private store: Store&lt;AppState&gt;</span><br><span class="line">  ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  addTutorial(name, url)&#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(<span class="keyword">new</span> TutorialActions.AddTutorial(&#123;name, url&#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Create Html 입니다.<br>/src/app/create/create.component.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> #<span class="attr">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"url"</span> #<span class="attr">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"addTutorial(name.value,url.value)"</span>&gt;</span>Add a Tutorial<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CreateComponent 에서 addTutorial() 을 사용하면 TutorialActions.AddTutorial의 action을 통해 해당하는 reducer 동작을 합니다.</p><h2 id="Remove-구현"><a href="#Remove-구현" class="headerlink" title="Remove 구현"></a>Remove 구현</h2><p>remove를 구현하기 위해 read.component.html 을 다음과 같이 바꿔봅시다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> *<span class="attr">ngIf</span>=<span class="string">"tutorials"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Tutorials<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let tutorial of tutorials | async; let i = index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">"tutorial.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123; tutorial.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"delTutorial(i)"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>delTutorial을 수행하는 button이 추가되었고 for…of 안에 index를 사용하는 구문이 추가되었습니다.</p><p>이제 read.component.ts 와 tutorial.reducer.ts에 remove 동작을 구현해봅시다.</p><p>/src/app/read/read.component.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppState &#125; <span class="keyword">from</span> <span class="string">'../app.state'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-read'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./read.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./read.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  tutorials: Observable&lt;Tutorial[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private store: Store&lt;AppState&gt;</span><br><span class="line">  ) &#123; </span><br><span class="line">    <span class="keyword">this</span>.tutorials = <span class="keyword">this</span>.store.select(<span class="string">'tutorial'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 요 부분을 추가해주세요</span></span><br><span class="line">  delTutorial(index)&#123;</span><br><span class="line">    <span class="keyword">this</span>.store.dispatch(<span class="keyword">new</span> TutorialActions.RemoveTutorial(index))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>/src/app/reducers/tutorial.reducer.ts<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">'@ngrx/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tutorial &#125; <span class="keyword">from</span> <span class="string">'../models/tutorial.model'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TutorialActions <span class="keyword">from</span> <span class="string">'../actions/tutorial.actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: Tutorial = &#123;</span><br><span class="line">  name: <span class="string">'Initial Tutorial'</span>,</span><br><span class="line">  url: <span class="string">'http://google.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">tutorialReducer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  state: Tutorial[] = [initialState], </span></span></span><br><span class="line"><span class="function"><span class="params">  action: TutorialActions.Actions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> TutorialActions.ADD_TUTORIAL:</span><br><span class="line">      <span class="keyword">return</span> [...state, action.payload];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove action을 사용합니다</span></span><br><span class="line">    <span class="keyword">case</span> TutorialActions.REMOVE_TUTORIAL:</span><br><span class="line">      state.splice(action.payload, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>splice를 사용해 리스트를 삭제하고 있습니다. http통신을 통한 list를 제어할 경우 화면상의 빠른 동작을 위해 리스트 전체를 다시 불러오는게 아니라 삭제된 부분만 클라이언트에서 삭제하는 경우가 많습니다. </p><p>다음번엔 @ngrx/effects 를 공부해보겠습니다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ngrx </tag>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH6 함수</title>
      <link href="/2019/01/02/learningJavascript-ch6/"/>
      <url>/2019/01/02/learningJavascript-ch6/</url>
      
        <content type="html"><![CDATA[<h2 id="6-1-반환-값"><a href="#6-1-반환-값" class="headerlink" title="6.1 반환 값"></a>6.1 반환 값</h2><p>함수 바디안에 return 키워드를 사용하면 함수를 즉시 종료하고 값을 반환합니다.</p><h2 id="6-2-호출과-참조"><a href="#6-2-호출과-참조" class="headerlink" title="6.2 호출과 참조"></a>6.2 호출과 참조</h2><p>자바스크립트에서는 함수도 객체입니다. 따라서 다른 객체와 마찬가지로 넘기거나 할당할 수 있습니다. 함수 식별자 뒤에 괄호를 쓰면 자바스크립트는 함수를 호출하려 한다고 이해하고, 함수 바디를 실행합니다. 그리고 함수를 호출한 표현식은 반환값이 됩니다. 괄호를 쓰지 않으면 다른 값과 마찬가지로 함수를 참조하는 것이며, 그 함수는 실행되지 않습니다.</p><p>함수를 호출하지 않고 다른 값과 마찬가지로 참조하기만 할 수 있다는 특징은 자바스크립트를 매우 유연한 언어로 만듭니다. 예를 들어 함수를 변수에 할당하면 다른 이름으로 함수를 호출할 수 있습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getGreeting(); <span class="comment">// "Hello, World!"</span></span><br><span class="line">getGreeting; <span class="comment">// function getGreeting()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = getGreeting;</span><br><span class="line">f(); <span class="comment">//"Hello, World!"</span></span><br></pre></td></tr></table></figure><p>함수를 객체 프로퍼티에 할당할 수도 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="number">0</span> = &#123;&#125;;</span><br><span class="line">o.f = getGreeting;</span><br><span class="line">o.f(); <span class="comment">// "Hello, World!"</span></span><br></pre></td></tr></table></figure><h2 id="6-3-함수와-매개변수"><a href="#6-3-함수와-매개변수" class="headerlink" title="6.3 함수와 매개변수"></a>6.3 함수와 매개변수</h2><p>함수를 호출하면서 정보를 전달할 때는 함수 매개변수를 이용합니다. 매개변수는 함수가 호출되기 전에는 존재하지 않는다는 점을 제외하면 일반적인 변수나 마찬가지입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (a*b)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 함수 선언에서 a와 b를 정해진 매개변수라고 합니다. 함수가 호출되면 정해진 매개변수는 값을 받아 실제 매개변수가 됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avg(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 7.5</span></span><br></pre></td></tr></table></figure><p>실제 매개변수는 변수와 매우 비슷하지만, 함수 바디 안에서만 존재합니다. 함수를 호출하면 함수 매개변수는 변수 자체가 아니라 그 값을 전달받습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`f 내부: x=<span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line">  x = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`f 내부: x=<span class="subst">$&#123;x&#125;</span> (할당 후)`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출하기 전: x=<span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line">f(x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출한 다음: x=<span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">  f를 호출하기 전: x=3</span></span><br><span class="line"><span class="comment">  f 내부: x=3</span></span><br><span class="line"><span class="comment">  f 내부: x=5 (할당 후)</span></span><br><span class="line"><span class="comment">  f를 호출한 다음: x=3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>여기서 중요한 것은 함수 안에서 x에 값을 할당하더라도 함수 바깥의 변수 x에는 아무 영향도 없다는 것입니다. 하지만 함수 안에서 객체 자체를 변경하면 그 객체는 함수 바깥에서도 바뀐 점이 반영됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.message = <span class="string">`f 안에서 수정함 (이전 값: '<span class="subst">$&#123;o.message&#125;</span>')`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  message: <span class="string">"초기 값"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출하기 전: o.message=<span class="subst">$&#123;o.message&#125;</span>`</span>);</span><br><span class="line">f(o);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`f를 호출한 다음: o.message=<span class="subst">$&#123;o.message&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">  f를 호출하기 전: o.message="초기 값"</span></span><br><span class="line"><span class="comment">  f를 호출한 다음: o.message="f 안에서 수정함 (이전 값: '초기 값')"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>위 예제를 보면 함수 f 안에서 객체 o를 수정했고, 이렇게 바꾼 내용은 함수 바깥에서도 o에 그대로 반영되어 있음을 알 수 있습니다.</p><h3 id="6-3-1-매개변수가-함수를-결정하는가"><a href="#6-3-1-매개변수가-함수를-결정하는가" class="headerlink" title="6.3.1 매개변수가 함수를 결정하는가?"></a>6.3.1 매개변수가 함수를 결정하는가?</h3><p>여러 언어에서 함수의 시그니처에는 매개변수가 포함됩니다. 예를 들어 C언어에서 매개변수 없는 함수 f() 는 매개변수가 하나인 함수 f(x)와 다르고, f(x)는 매개변수가 두 개인 함수 f(x, y) 와 다릅니다. 자바스크립트에는 그런 차이가 없습니다. 함수 f가 있다면 호출할 때 매개변수를 한 개 전달하든 열 개 전달하든 같은 함수를 호출하는 겁니다.</p><h3 id="6-3-2-매개변수-해체"><a href="#6-3-2-매개변수-해체" class="headerlink" title="6.3.2 매개변수 해체"></a>6.3.2 매개변수 해체</h3><p>매개변수도 해체가 가능합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSentence</span>(<span class="params">&#123;subject, verb, object&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;subject&#125;</span> <span class="subst">$&#123;verb&#125;</span> <span class="subst">$&#123;object&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  subject: <span class="string">"I"</span>,</span><br><span class="line">  verb: <span class="string">"love"</span>,</span><br><span class="line">  object: <span class="string">"Javascript"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getSentence(o); <span class="comment">// "I love Javascript"</span></span><br></pre></td></tr></table></figure><p>해체 할당과 마찬가지로 프로퍼티 이름은 반드시 유효한 식별자여야 하고, 들어오는 객체에 해당 프로퍼티가 없는 변수는 undefined를 할당받습니다.</p><p>함수를 선언할 때 확산 연산자는 반드시 마지막 매개변수여야 합니다. 확산 연산자 뒤에 다른 매개변수가 있으면 자바스크립트는 전달된 값 중 어디까지를 확산 매개변수에 할당해야 하는지 판단할 수 없어서 에러를 일으킵니다.</p><h3 id="6-3-3-매개변수-기본값"><a href="#6-3-3-매개변수-기본값" class="headerlink" title="6.3.3 매개변수 기본값"></a>6.3.3 매개변수 기본값</h3><p>ES6에서는 매개변수에 기본값을 지정하는 기능도 추가됐습니다. 일반적으로 매개변수에 값을 제공하지 않으면 undefined가 값으로 할당됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b=<span class="string">"default"</span>, c=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;a&#125;</span> - <span class="subst">$&#123;b&#125;</span> - <span class="subst">$&#123;c&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>); <span class="comment">// 5 - 6 - 7</span></span><br><span class="line">f(<span class="number">5</span>,<span class="number">6</span>); <span class="comment">// 5 - 6 - 3</span></span><br><span class="line">f(<span class="number">5</span>); <span class="comment">// 5 - default - 3</span></span><br><span class="line">f(); <span class="comment">// undefined - default - 3</span></span><br></pre></td></tr></table></figure><h2 id="6-4-객체의-프로퍼티인-함수"><a href="#6-4-객체의-프로퍼티인-함수" class="headerlink" title="6.4 객체의 프로퍼티인 함수"></a>6.4 객체의 프로퍼티인 함수</h2><p>객체의 프로퍼티인 함수를 메서드라고 불러서 일반적인 함수와 구별합니다. 함수와 메서드 사이에는 다른 차이도 있는데 그건 나중에 다시 설명합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  name: <span class="string">"Wallace"</span>, <span class="comment">// 원시 값 프로퍼티</span></span><br><span class="line">  bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="string">"Woof!"</span>;&#125; <span class="comment">// 함수 프로퍼티(메서드)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6에서는 간편하게 메서드를 추가할 수 있는 문법이 새로 생겼습니다. 다음 예제는 이전 예제와 동일합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  name: <span class="string">'Wallace'</span>, <span class="comment">// 원시 값 프로퍼티</span></span><br><span class="line">  bark() &#123;<span class="keyword">return</span> <span class="string">"Woof!"</span>;&#125; <span class="comment">// 함수 프로퍼티(메서드)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 러닝자바스크립트 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic issue 01</title>
      <link href="/2019/01/01/ionic-issue-01/"/>
      <url>/2019/01/01/ionic-issue-01/</url>
      
        <content type="html"><![CDATA[<h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> mapHeightInit()&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.isPlaceSearch) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> contentEle:HTMLElement = <span class="keyword">await</span> <span class="keyword">this</span>.content.getScrollElement();</span><br><span class="line">  <span class="keyword">this</span>.mapFullSize = contentEle.clientHeight - <span class="number">100</span> + <span class="string">"px"</span>;</span><br><span class="line">  <span class="keyword">this</span>.mapDiv.nativeElement.style.height = <span class="keyword">this</span>.mapFullSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>화면에 전체높이를 알아야 가능한 작업이 있어서 Ionic의 Content를 가져와서 height 값을 계산해서 특정 Element의 높이를 정해줫다.</p><p>문제는 Angular Animation을 이용한 높이를 재조정 이후에 Height값을 다시 지정하는게 어려웠다. 높이를 재설정 해줫지만 적용되지 않았다.</p><h2 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h2><p>Angular Animation을 이용해서 높이값이 재조정 될 때 transition의 time이 300ms 였고, 모든 이벤트가 끝난 이후에 높이를 설정해줘야 했다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">HeightToggle</span>(<span class="params">to, name=<span class="string">"HeightToggle"</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> trigger(name,[</span><br><span class="line">state(<span class="string">'1'</span>, style(&#123;<span class="attr">height</span>: <span class="string">'*'</span>&#125;)),</span><br><span class="line">state(<span class="string">'0'</span>, style(&#123;<span class="attr">height</span>: <span class="string">'&#123;&#123; to &#125;&#125;'</span>&#125;), &#123;<span class="attr">params</span>: &#123;to&#125;&#125;),</span><br><span class="line">transition(<span class="string">'1 =&gt; 0'</span>, animate(<span class="string">'300ms ease-in'</span>)),</span><br><span class="line">transition(<span class="string">'0 =&gt; 1'</span>, animate(<span class="string">'300ms ease-out'</span>))</span><br><span class="line">]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>다행히 Angular에서는 Animation이 끝나는 이벤트가 존재했다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toggle"</span> [@<span class="attr">toggle</span>]=<span class="string">"show"</span> </span></span><br><span class="line"><span class="tag">  (@<span class="attr">toggle.start</span>)=<span class="string">"animationStarted($event)"</span></span></span><br><span class="line"><span class="tag">  (@<span class="attr">toggle.done</span>)=<span class="string">"animationDone($event)"</span></span></span><br><span class="line"><span class="tag">*<span class="attr">ngIf</span>=<span class="string">"show"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 문제해결 </tag>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH5 표현식과 연산자</title>
      <link href="/2018/12/23/learningJavscript-ch5/"/>
      <url>/2018/12/23/learningJavscript-ch5/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-연산자"><a href="#5-1-연산자" class="headerlink" title="5.1 연산자"></a>5.1 연산자</h2><p>연산자는 하나 이상의 피연산자가 있어야 결과를 낼 수 있습니다. 예를들어 1+2 라는 표현식에서<br>1, 2 는 피연산자이고 + 는 연산자입니다. 피연산자를 매개변수라 부르는 경우도 있습니다.</p><h2 id="5-2-산술-연산자"><a href="#5-2-산술-연산자" class="headerlink" title="5.2 산술 연산자"></a>5.2 산술 연산자</h2><table><thead><tr><th>연산자</th><th>설명</th><th>예제</th></tr></thead><tbody><tr><td>+</td><td>덧셈</td><td>3+2 // 5</td></tr><tr><td>-</td><td>뺄셈</td><td>3-2 // 1</td></tr><tr><td>/</td><td>나눗셈</td><td>3/2 // 1.5</td></tr><tr><td>*</td><td>곱셈</td><td>3*2 // 6</td></tr><tr><td>%</td><td>나머지</td><td>3%2 // 1</td></tr><tr><td>-</td><td>단항 부정</td><td>-x // x의 부호를 바꿈</td></tr><tr><td>+</td><td>단항 플러스</td><td>+x // x가 숫자가 아니면 숫자로 변환시도</td></tr><tr><td>++</td><td>전위 증가</td><td>++x</td></tr><tr><td>++</td><td>후위 증가</td><td>x++</td></tr><tr><td>–</td><td>전위 감소</td><td>–x</td></tr><tr><td>–</td><td>후위 감소</td><td>x–</td></tr></tbody></table><ul><li><p>자바스크립트의 숫자는 모두 Double 형식이므로 3/2 처럼 정수를 연산한 결과도 더블 형식입니다.</p></li><li><p>단항 부정과 단항 플러스의 경우는 변수에만 사용합니다. 숫자형 리터럴 앞에 붙으면 숫자 리터럴의 일부로 해석되어 연산자가 되지않습니다.</p></li><li><p>위, 후위 연산자의 차이도 이해해야 합니다. 전위 연산자는 연산이 이루어지기 전에 증/감이 이루어지며 후위 연산자는 연산 이후에 증/감이 이루어집니다.</p></li></ul><h2 id="5-3-연산자-우선순위"><a href="#5-3-연산자-우선순위" class="headerlink" title="5.3 연산자 우선순위"></a>5.3 연산자 우선순위</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/%EC%97%B0%EC%82%B0%EC%9E%90_%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84#%ED%91%9C" target="_blank" rel="noopener">https://developer.mozilla.org 참조</a></li><li>자바스크립트 연산자 우선순위중 가장 높은것이 괄호()입니다.</li><li>같은 우선순위에선 정의되어있는 순서(오른쪽 -&gt; 왼쪽, 왼쪽 -&gt; 오른쪽) 순서를 따릅니다.</li></ul><h2 id="5-4-비교-연산자"><a href="#5-4-비교-연산자" class="headerlink" title="5.4 비교 연산자"></a>5.4 비교 연산자</h2><p>비교 연산자는 이름처럼 두 개의 값을 비교합니다. 크게 일치함(===), 동등함(==), 대소관계 세 가지 타입으로 나뉩니다.</p><p>일치 관계는 같은 객체를 가리키거나, 같은 타입이고 값도 같다면 일치하다고 합니다. 일치관계의 경우 단순하고 이해하기 쉬우므로 버그나 오해를 낳는 경우가 거의 없습니다.</p><p>동등 관계는 두 값이 같은 객체를 가리키거나 같은 값을 갖도록 변환할 수 있다면 두 값을 동등하다고 봅니다. 두번째 성질 때문에 수많은 골칫거리와 혼란을 발생시켰는데 예로는 33 == “33” 같은 경우 입니다.</p><p>관계 연산자는 관계가 있는 값을 비교하며, 문자열이나 숫자처럼 원래 순서가 있는 데이터 타입에만 사용할 수 있습니다.</p><h2 id="5-5-숫자-비교"><a href="#5-5-숫자-비교" class="headerlink" title="5.5 숫자 비교"></a>5.5 숫자 비교</h2><p>숫자를 비교할 때는 염두해 두어야 할 것이 있습니다.</p><p>먼저 특별한 숫자형 값 NaN은 그 자신을 포함하여 무엇과도 같지 않습니다. 즉, NaN === NaN 과 NaN == NaN은 모두 false 입니다. 숫자가 NaN인지 알아보려면 내장된 isNaN 함수를 사용하십시오.</p><p>자바스크립트에서 숫자는 모두 Double형식입니다. 그리고 더블 형식은 근사치 이므로, 자바스크립트에서 숫자를 비교하다보면 예상치 못한 결과가 생길때가 있습니다.</p><p>자바스크립트에서 정수를 비교할 때, 그 정수가 안전한 범위라면 (Number.MIN_SAFE_INTEGER이상, Number.MAX_SAFE_INTEGER 이하) 안심하고 일치 연산자를 사용할 수 있습니다. 하지만 소수점이 있는 숫자를 비교할 때는 관계 연산자를 써서 테스트 하는 숫자가 대상 숫자에 “충분히 가까운지” 확인하는 편이 좋습니다. 자바스크립트에는 특별한 숫자형 상수 Number.EPSILON이 있습니다. 이것은 매우 작은값(약 2.22e-16)이며, 일반적으로 숫자 두 개를 구별하는 기준으로 사용합니다. 다음 예제를 보십시오.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  n += <span class="number">0.1</span>;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">0.3</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Stopped at <span class="subst">$&#123;n&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>이 코드를 실행하면 0.3에서 멈추지 않고 무한루프를 돌게됩니다. 이러한 현상이 생기는 이유는 0.1이 더블 형식으로 정확히 나타낼 수 없는 값이기 때문이기 때문입니다. 0.1은 이진 표현으로 나타낼 수 있는 숫자들 사이에 걸쳐 있습니다. 따라서 이 루프를 세 번째 반복할 때 n의 값은 0.30000000000000004 이므로 테스트는 false가 됩니다.</p><p>이때 Number.EPSILON과 관계 연산자를 사용해서 ‘느슨하게’ 비교하면 성공적으로 루프를 빠져나갈 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  n += <span class="number">0.1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(n - <span class="number">0.3</span>) &lt; <span class="built_in">Number</span>.EPSILON) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Stopped at <span class="subst">$&#123;n&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2 id="5-6-문자열-병합"><a href="#5-6-문자열-병합" class="headerlink" title="5.6 문자열 병합"></a>5.6 문자열 병합</h2><p>자바스크립트는 피연산자의 타입을 보고 덧셈을 할지 문자열 병합을 할지 판단합니다. 두 피연산자를 왼쪽에서 오른쪽으로 평가한 후, 피연산자 중 하나라도 문자열이면 문자열 병합을 수행합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">5</span> + <span class="string">"8"</span> <span class="comment">// 문자열 "88"이 됩니다.</span></span><br><span class="line"><span class="string">"3"</span> + <span class="number">5</span> + <span class="number">8</span> <span class="comment">// 문자열 "358"이 됩니다.</span></span><br></pre></td></tr></table></figure><h2 id="5-7-논리-연산자"><a href="#5-7-논리-연산자" class="headerlink" title="5.7 논리 연산자"></a>5.7 논리 연산자</h2><p>논리 연산자는 Boolean값만 다룰 수 있습니다. 대부분의 프로그래밍 언어에서 논리 연산자는 불리언 값에서만 동작하며 불리언 값만 반환합니다. 반면 자바스크립트의 논리 연산자는 불리언이 아닌 값도 다룰 수 있고, 놀랍게도 불리언이 아닌 값을 반환하기도 합니다.</p><p>연산자에 대해 설명하기 전에 자바스크립트가 불리언이 아닌 값을 불리언 값으로 바꾸는 방법에 익숙해져야 합니다.</p><h3 id="5-7-1-참-같은-값과-거짓-같은-값"><a href="#5-7-1-참-같은-값과-거짓-같은-값" class="headerlink" title="5.7.1 참 같은 값과 거짓 같은 값"></a>5.7.1 참 같은 값과 거짓 같은 값</h3><p>자바스크립트에서는 모든 데이터 타입을 참 같은 값과 거짓 같은 값으로 나눌 수 있습니다.</p><p>거짓 같은 값은 다음과 같습니다.</p><ul><li>undefined</li><li>null</li><li>false</li><li>0</li><li>NaN</li><li>‘’ (빈 문자열)</li></ul><p>이들 외에는 모두 참 같은 값입니다. 참 같은 값은 정말 많으므로 전부 나열할 수 없지만 몇 가지는 염두에 두어야 합니다.</p><ul><li>모든 객체 valueOf() 메서드를 호출했을 때 false를 반환하는 객체도 참 같은 값에 속합니다.</li><li>배열, 빈 배열도 참 같은 값에 속합니다.</li><li>공백만 있는 문자열 (“  “)등</li><li>문자열 “false”</li></ul><h2 id="5-8-AND-OR-NOT"><a href="#5-8-AND-OR-NOT" class="headerlink" title="5.8 AND, OR, NOT"></a>5.8 AND, OR, NOT</h2><p>자바스크립트가 지원하는 논리 연산자는 AND(&amp;&amp;), OR(||), NOT(!) 세 가지 입니다. </p><h3 id="5-8-1-단축-평가"><a href="#5-8-1-단축-평가" class="headerlink" title="5.8.1 단축 평가"></a>5.8.1 단축 평가</h3><p>AND연산의 경우 두 값을 모두 평가하지 않아도 될 때가 있습니다. x &amp;&amp; y 에서 x가 false 라면 y는 평가할 필요없이 연산의 결과는 false 입니다. 자바스크립트는 이런 방식으로 동작하며 이것을 단축 평가 라고 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> skipIt = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> result = skipIt || x++;</span><br></pre></td></tr></table></figure><p>위 연산에서 재밋는 점은 skipIt이 true 이므로 x++ 이 연산되지 않고 지나간다는 점 입니다.<br>x++ 연산을 동작 시키려면 skipIt이 false가 되면 됩니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doIt = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> result = doIt &amp;&amp; x++;</span><br></pre></td></tr></table></figure><p>여기에선 더 재미있는 현상이 일어납니다. doIt이 false 일 경우 x++연산이 스킵되지만 doIt이 true이면 x++연산이 일어납니다.<br>하지만 result에 저장되는 값은 true가 아닌 0이 들어가게 됩니다.<br>이렇게 동작하는 이유를 알기위해선 피연산자가 불리언이 아닐 때 논리연산자가 동작하는 방법을 알아야 합니다.</p><h3 id="5-8-2-피연산자가-불리언이-아닐-때-논리-연산자가-동작하는-방법"><a href="#5-8-2-피연산자가-불리언이-아닐-때-논리-연산자가-동작하는-방법" class="headerlink" title="5.8.2 피연산자가 불리언이 아닐 때 논리 연산자가 동작하는 방법"></a>5.8.2 피연산자가 불리언이 아닐 때 논리 연산자가 동작하는 방법</h3><p>불리언 피연산자를 사용하면 논리 연산자는 항상 불리언을 반환합니다. 피연산자가 불리언이 아니면, 결과물을 결정한 값이 반환됩니다.</p><table><thead><tr><th>x</th><th>y</th><th>x &amp;&amp; y</th></tr></thead><tbody><tr><td>거짓 같은 값</td><td>거짓 같은 값</td><td>x(거짓 같은 값)</td></tr><tr><td>거짓 같은 값</td><td>참 같은 값</td><td>x(거짓 같은 값)</td></tr><tr><td>참 같은 값</td><td>거짓 같은 값</td><td>y(거짓 같은 값)</td></tr><tr><td>참 같은 값</td><td>참 같은 값</td><td>y(참 같은 값)</td></tr></tbody></table><table><thead><tr><th>x</th><th>y</th><th>x or y</th></tr></thead><tbody><tr><td>거짓 같은 값</td><td>거짓 같은 값</td><td>y(거짓 같은 값)</td></tr><tr><td>거짓 같은 값</td><td>참 같은 값</td><td>y(참 같은 값)</td></tr><tr><td>참 같은 값</td><td>거짓 같은 값</td><td>x(참 같은 값)</td></tr><tr><td>참 같은 값</td><td>참 같은 값</td><td>x(참 같은 값)</td></tr></tbody></table><p>이런 자바스크립트의 특징을 이용한 몇가지 코딩 트릭이 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = suppliedOptions || &#123;<span class="attr">name</span>: <span class="string">"Default"</span>&#125;</span><br></pre></td></tr></table></figure><p>객체는 빈 값이어도 항상 참 같은 값으로 평가됩니다. 따라서 suppliedOptions가 객체이면 options는 suppliedOptions를 가리키게 됩니다. 옵션이 제공되지 않으면, 즉 suppliedOptions가 null이나 undefiend라면 options는 기본값을 갖게 됩니다.</p><h3 id="5-8-3-조건-연산자"><a href="#5-8-3-조건-연산자" class="headerlink" title="5.8.3 조건 연산자"></a>5.8.3 조건 연산자</h3><p>조건 연산자는 자바스크립트의 유일한 3항 연산자 입니다. 조건 연산자는 if…else 문과 동일한 표현식 입니다. 다음 예제를 보십시오</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doIt = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> result = doIt ? <span class="string">"Did it!"</span> : <span class="string">"Didn't do it."</span>;</span><br></pre></td></tr></table></figure><p>3항 연산자를 if…else 문을 혼란스럽게 바꿔 놓은것이 아니냐는 식으로 생각할 수 있지만, 3항 연산자는 문이 아니라 표현식이므로 다른 표현식과 결합하여 매우 유용하게 사용할 수 있습니다.</p><h3 id="5-8-4-쉼표-연산자"><a href="#5-8-4-쉼표-연산자" class="headerlink" title="5.8.4 쉼표 연산자"></a>5.8.4 쉼표 연산자</h3><p>쉼표 연산자는 표현식을 결합하여 두 표현식을 평가한 후, 두 번째 표현식의 결과를 반환합니다.<br>표현식을 하나 이상 실행해야 하지만 값으로 필요한 것은 마지막 표현식의 결과뿐일 때 쉼표 연산자를 유용하게 쓸 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">10</span>, z;</span><br><span class="line">z = (x++, y++);</span><br></pre></td></tr></table></figure><p>이 예제에서 x,y 의 값은 1씩 증가하지만 z의 값은 10, 즉 y++가 반환하는 값입니다. 쉼표 연산자는 우선순위가 가장 낮은 연산자 이므로 괄호를 사용했습니다. 쉼표 연산자는 for 문에서 표현식을 결합할 때 사용하거나, 함수에서 빠져나오기 전에 여러 가지 작업을 한데 묶을 때 사용합니다.</p><h2 id="5-9-연산자-그룹"><a href="#5-9-연산자-그룹" class="headerlink" title="5.9 연산자 그룹"></a>5.9 연산자 그룹</h2><p>그룹 연산자(괄호)에는 아무 효과도 없지만 연산자 우선순위를 높이거나 명확히 표현하는데 쓸 수 있습니다. 따라서 그룹 연산자는 연산 순서만 바꿀 뿐, 다른 부작용은 전혀 없는 안전한 연산자 입니다.</p><h3 id="5-9-1-비트-연산자"><a href="#5-9-1-비트-연산자" class="headerlink" title="5.9.1 비트 연산자"></a>5.9.1 비트 연산자</h3><p>비트 연산자는 피연산자를 2의 보수 형식으로 저장된 32비트 부호 붙은 정수로 간주합니다. 자바스크립트의 숫자는 모두 더블 형식이므로 자바스크립트는 비트 연산자를 실행하기 전에 숫자를 먼저 32비트 정수로 변환하고, 결과를 반환할 때 다시 더블 형식으로 변환합니다.</p><p>(마크다운 문법때문에 | 를 (or) 로 표기함)</p><table><thead><tr><th>연산자</th><th>설명</th><th>예제</th></tr></thead><tbody><tr><td>&amp;</td><td>비트 AND</td><td>0b1010 &amp; 0b1100 // 결과: 0b1000</td></tr><tr><td>(or)</td><td>비트 OR</td><td>0b1010 (or) 0b1100 // 결과: 0b1110</td></tr><tr><td>^</td><td>비트 XOR</td><td>0b1010 ^ 0b1100 // 결과: 0b0110</td></tr><tr><td>~</td><td>비트 NOT</td><td>-0b1010 // 결과: 0b0101</td></tr><tr><td>&lt;&lt;</td><td>왼쪽 시프트</td><td></td></tr><tr><td>&gt;&gt;</td><td>부호가 따라가는 오른쪽 시프트</td><td></td></tr><tr><td>&gt;&gt;&gt;</td><td>0으로 채우는 오른쪽 시프트</td></tr></tbody></table><p>왼쪽 시프트는 2를 곱하는 효과가 있고, 오른쪽 시프트는 2로 나눈 다음 소수점 아래를 버리는 효과가 있습니다.<br>하드웨어 조작을 제외하고 비트 연산자를 쓰는 것이 효율적인 경우는 플래그(불리언 값)을 다룰때 입니다.</p><p>유닉스에서는 파일에 읽기, 쓰기, 실행 권한을 각각 지정할 수 있습니다. 사용자 마다 이들 권한이 각각 주어질 수 있으므로 플래그를 사용하는 것이 어울립니다. 플래그가 세 개 있으므로 이 정보를 저장하는 데는 비트 세 개가 필요합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FLAG_EXECUTE = <span class="number">1</span> <span class="comment">// 0b001</span></span><br><span class="line"><span class="keyword">const</span> FLAG_WRITE = <span class="number">2</span> <span class="comment">// 0b010</span></span><br><span class="line"><span class="keyword">const</span> FLAG_READ = <span class="number">4</span> <span class="comment">// 0b100</span></span><br></pre></td></tr></table></figure><h3 id="5-9-2-typeof-연산자"><a href="#5-9-2-typeof-연산자" class="headerlink" title="5.9.2 typeof 연산자"></a>5.9.2 typeof 연산자</h3><p>typeof 연산자는 피연산자의 타입을 나타내는 문자열을 반환합니다. 하지만 이 연산자는 자바스크립트의 일곱가지 데이터 타입을 정확하게 나타내지 못하며 끝없는 혼란을 초래했고 계속 비판받았습니다.</p><p>다음은 typeof가 반환할 수 있는 값입니다.</p><table><thead><tr><th>표현식</th><th>반환값</th><th>참고</th></tr></thead><tbody><tr><td>typeof undefined</td><td>“undefined”</td><td></td></tr><tr><td>typeof null</td><td>“object”</td><td>애석하지만 사실입니다.</td></tr><tr><td>typeof {}</td><td>“object”</td><td></td></tr><tr><td>typeof true</td><td>“boolean”</td><td></td></tr><tr><td>typeof 1</td><td>“number”</td><td></td></tr><tr><td>typeof “”</td><td>“string”</td><td></td></tr><tr><td>typeof Symbol()</td><td>“symbol”</td><td>ES6에서 새로 생겼습니다.</td></tr><tr><td>typeof function(){}</td><td>“function”</td></tr></tbody></table><h3 id="5-9-3-void-연산자"><a href="#5-9-3-void-연산자" class="headerlink" title="5.9.3 void 연산자"></a>5.9.3 void 연산자</h3><p>void 연산자는 undefined를 반환합니다. 잘 쓰이진 않지만 다음과 같은 방법으로도 사용 가능합니다</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void 0"</span>&gt;</span>Do nothing.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-9-4-할당-연산자"><a href="#5-9-4-할당-연산자" class="headerlink" title="5.9.4 할당 연산자"></a>5.9.4 할당 연산자</h3><p>할당 연산자는 변수에 값을 할당해야 합니다. 그렇기 때문에 표현식의 좌변에 있는 것은 반드시 값을 저장할 수 있는 것이어야 합니다.</p><h2 id="5-10-해체-할당"><a href="#5-10-해체-할당" class="headerlink" title="5.10 해체 할당"></a>5.10 해체 할당</h2><p>ES6에서 새로 도입한 해체 할당은 매우 환영 받는 기능입니다. 이 기능은 객체나 배열을 변수로 ‘해체’할 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 선언</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 해체 할당</span></span><br><span class="line"><span class="keyword">const</span> &#123;a, b, c&#125; = obj;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// undefind</span></span><br><span class="line">b; <span class="comment">// 2</span></span><br><span class="line">c; <span class="comment">// 3</span></span><br><span class="line">d; <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>객체를 해체할 때는 반드시 변수 이름과 객체의 프로퍼티 이름이 일치해야 합니다. 프로퍼티 이름이 유효한 식별자인 프로퍼티만 해체 후 할당됩니다.</p><p>이 예제에서는 선언과 할당을 같은 문에서 실행했습니다. 객체 해체는 할당만으로 이뤄질 수도 있지만, 그렇게 하려면 반드시 괄호를 써야합니다. 괄호를 쓰지 않으면 자바스크립트는 표현식 좌변을 블록으로 해석합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 에러가 납니다.</span></span><br><span class="line">&#123;a, b, c&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동작합니다.</span></span><br><span class="line">(&#123;a, b, c&#125; = obj);</span><br></pre></td></tr></table></figure><p>배열을 해체할 때는 배열 요소에 대응할 변수 이름을 마음대로 쓸 수 있으며 이들은 배열 순서대로 대응합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 배열 선언</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 해체 할당</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = arr;</span><br><span class="line">x; <span class="comment">// 1,</span></span><br><span class="line">y; <span class="comment">// 2,</span></span><br><span class="line">z; <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>확산 연산자(…)를 사용하면 남은 요소를 새 배열에 할당할 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...rest] = arr;</span><br><span class="line"></span><br><span class="line">x; <span class="comment">// 1</span></span><br><span class="line">y; <span class="comment">// 2</span></span><br><span class="line">rest; <span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><p>배열 해체를 활용한 변수 값 교환도 유용하게 쓸 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">[a,b] = [b,a];</span><br><span class="line">a; <span class="comment">// 10</span></span><br><span class="line">b; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="5-11-객체와-배열-연산자"><a href="#5-11-객체와-배열-연산자" class="headerlink" title="5.11 객체와 배열 연산자"></a>5.11 객체와 배열 연산자</h2><p>객체와 배열, 함수에는 특별한 연산자가 있습니다. 이러한 연산자는 해당 챕터에서 자세히 설명되어 있습니다.</p><h2 id="5-12-템플릿-문자열과-표현식"><a href="#5-12-템플릿-문자열과-표현식" class="headerlink" title="5.12 템플릿 문자열과 표현식"></a>5.12 템플릿 문자열과 표현식</h2><p>템플린 문자열은 어떤 표현식이든 그 값을 문자열에 넣을 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> roomTempC = <span class="number">21.5</span>;</span><br><span class="line"><span class="keyword">let</span> currentTempC = <span class="number">19.5</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`The current temperature is `</span> +</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;currentTempC - roomTempC&#125;</span>\u00b0 different than room temperature.`</span>;</span><br><span class="line"><span class="keyword">const</span> fahrenheit = </span><br><span class="line">  <span class="string">`The current temperature is <span class="subst">$&#123;currentTempC * <span class="number">9</span><span class="regexp">/5 + 32&#125;\u00b0F`;</span></span></span></span><br></pre></td></tr></table></figure><h2 id="5-13-표현식과-흐름-제어-패턴"><a href="#5-13-표현식과-흐름-제어-패턴" class="headerlink" title="5.13 표현식과 흐름 제어 패턴"></a>5.13 표현식과 흐름 제어 패턴</h2><h3 id="5-13-1-if…else-문을-3항-연산자로-바꾸기-생략"><a href="#5-13-1-if…else-문을-3항-연산자로-바꾸기-생략" class="headerlink" title="5.13.1 if…else 문을 3항 연산자로 바꾸기(생략)"></a>5.13.1 if…else 문을 3항 연산자로 바꾸기(생략)</h3><h3 id="5-13-2-if-문을-단축-평가하는-OR-표현식으로-바꾸기"><a href="#5-13-2-if-문을-단축-평가하는-OR-표현식으로-바꾸기" class="headerlink" title="5.13.2 if 문을 단축 평가하는 OR 표현식으로 바꾸기"></a>5.13.2 if 문을 단축 평가하는 OR 표현식으로 바꾸기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!options) options = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이처럼 바꿀 수 있습니다.</span></span><br><span class="line">options = options || &#123;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 러닝자바스크립트 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tags and Categories</title>
      <link href="/2018/12/22/Tags-and-Categories/"/>
      <url>/2018/12/22/Tags-and-Categories/</url>
      
        <content type="html"><![CDATA[<p>This post contains 2 tags and 1 category.</p>]]></content>
      
      
      <categories>
          
          <category> Baz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foo </tag>
            
            <tag> Bar </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
